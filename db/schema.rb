# encoding: UTF-8
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# Note that this schema.rb definition is the authoritative source for your
# database schema. If you need to create the application database on another
# system, you should be using db:schema:load, not running all the migrations
# from scratch. The latter is a flawed and unsustainable approach (the more migrations
# you'll amass, the slower it'll run and the greater likelihood for issues).
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema.define(version: 0) do

  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_view "accounting_transaction", "SELECT accounting_transaction.id, accounting_transaction.accounting_unit_id, accounting_transaction.fund_master_id, accounting_transaction.voucher_num, accounting_transaction.voucher_seq_num, accounting_transaction.posted_date, accounting_transaction.amt_type, accounting_transaction.amt, accounting_transaction.note, accounting_transaction.source_name, accounting_transaction.last_updated_gmt FROM iiirecord.accounting_transaction", :force => true
  create_view "accounting_transaction_ill_expenditure", "SELECT accttrans_ill_expenditure.id, accttrans_ill_expenditure.accounting_transaction_id FROM iiirecord.accttrans_ill_expenditure", :force => true
  create_view "accounting_transaction_invoice_encumbrance", "SELECT accttrans_invoice_encumberance.id, accttrans_invoice_encumberance.accounting_transaction_id, accttrans_invoice_encumberance.invoice_record_metadata_id, accttrans_invoice_encumberance.invoice_date, accttrans_invoice_encumberance.order_record_metadata_id, accttrans_invoice_encumberance.bib_record_metadata_id, accttrans_invoice_encumberance.location_code, accttrans_invoice_encumberance.copies, accttrans_invoice_encumberance.foreign_currency_code, accttrans_invoice_encumberance.foreign_currency_amt, accttrans_invoice_encumberance.xy_note, accttrans_invoice_encumberance.subscription_from_date, accttrans_invoice_encumberance.subscription_to_date, accttrans_invoice_encumberance.invoice_record_line_item_num, accttrans_invoice_encumberance.vendor_record_metadata_id FROM iiirecord.accttrans_invoice_encumberance", :force => true
  create_view "accounting_transaction_invoice_expenditure", "SELECT accttrans_invoice_expenditure.id, accttrans_invoice_expenditure.accounting_transaction_id, accttrans_invoice_expenditure.invoice_record_metadata_id, accttrans_invoice_expenditure.invoice_date, accttrans_invoice_expenditure.order_record_metadata_id, accttrans_invoice_expenditure.bib_record_metadata_id, accttrans_invoice_expenditure.subfund_code, accttrans_invoice_expenditure.location_code, accttrans_invoice_expenditure.copies, accttrans_invoice_expenditure.tax_amt, accttrans_invoice_expenditure.foreign_currency_code, accttrans_invoice_expenditure.foreign_currency_amt, accttrans_invoice_expenditure.foreign_currency_tax_amt, accttrans_invoice_expenditure.xy_note, accttrans_invoice_expenditure.use_tax_amt, accttrans_invoice_expenditure.ship_amt, accttrans_invoice_expenditure.discount_amt, accttrans_invoice_expenditure.service_charge_amt, accttrans_invoice_expenditure.subscription_from_date, accttrans_invoice_expenditure.subscription_to_date, accttrans_invoice_expenditure.invoice_record_line_item_num, accttrans_invoice_expenditure.vendor_record_metadata_id FROM iiirecord.accttrans_invoice_expenditure", :force => true
  create_view "accounting_transaction_manual_appropriation", "SELECT accttrans_manual_appropriation.id, accttrans_manual_appropriation.accounting_transaction_id FROM iiirecord.accttrans_manual_appropriation", :force => true
  create_view "accounting_transaction_manual_encumbrance", "SELECT accttrans_manual_encumberance.id, accttrans_manual_encumberance.accounting_transaction_id FROM iiirecord.accttrans_manual_encumberance", :force => true
  create_view "accounting_transaction_manual_expenditure", "SELECT accttrans_manual_expenditure.id, accttrans_manual_expenditure.accounting_transaction_id FROM iiirecord.accttrans_manual_expenditure", :force => true
  create_view "accounting_transaction_order_cancellation", "SELECT accttrans_order_cancellation.id, accttrans_order_cancellation.accounting_transaction_id, accttrans_order_cancellation.order_record_metadata_id, accttrans_order_cancellation.bib_record_metadata_id, accttrans_order_cancellation.location_code, accttrans_order_cancellation.copies, accttrans_order_cancellation.foreign_currency_code, accttrans_order_cancellation.foreign_currency_amt, accttrans_order_cancellation.subscription_from_date, accttrans_order_cancellation.subscription_to_date, accttrans_order_cancellation.vendor_record_metadata_id FROM iiirecord.accttrans_order_cancellation", :force => true
  create_view "accounting_transaction_order_encumbrance", "SELECT accttrans_order_encumberance.id, accttrans_order_encumberance.accounting_transaction_id, accttrans_order_encumberance.order_record_metadata_id, accttrans_order_encumberance.bib_record_metadata_id, accttrans_order_encumberance.location_code, accttrans_order_encumberance.copies, accttrans_order_encumberance.foreign_currency_code, accttrans_order_encumberance.foreign_currency_amt, accttrans_order_encumberance.subscription_from_date, accttrans_order_encumberance.subscription_to_date, accttrans_order_encumberance.vendor_record_metadata_id FROM iiirecord.accttrans_order_encumberance", :force => true
  create_view "accounting_unit", "SELECT accounting_unit.id, accounting_unit.code_num FROM public.accounting_unit", :force => true
  create_view "accounting_unit_name", "SELECT accounting_unit_name.id, accounting_unit_name.iii_language_id, accounting_unit_name.accounting_unit_id, accounting_unit_name.name FROM public.accounting_unit_name", :force => true
  create_view "iii_user", "SELECT iii_user.id, iii_user.name, iii_user.location_group_port_number, iii_user.iii_user_group_code, iii_user.full_name, iii_user.iii_language_id, iii_user.account_unit, iii_user.statistic_group_code_num, iii_user.system_option_group_code_num, iii_user.timeout_warning_seconds, iii_user.timeout_logout_seconds, iii_user.scope_menu_id, iii_user.scope_menu_bitmask, iii_user.is_new_account, iii_user.last_password_change_gmt, iii_user.is_exempt, iii_user.is_suspended, iii_user.is_context_only FROM iiienv.iii_user", :force => true
  create_view "accounting_unit_myuser", "SELECT a.code_num AS code, an.name FROM (public.accounting_unit a LEFT JOIN public.accounting_unit_name an ON (((a.id = an.accounting_unit_id) AND (an.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "acq_type_property", "SELECT acq_type_property.id, acq_type_property.code, acq_type_property.display_order FROM public.acq_type_property", :force => true
  create_view "acq_type_property_name", "SELECT acq_type_property_name.acq_type_property_id, acq_type_property_name.iii_language_id, acq_type_property_name.name FROM public.acq_type_property_name", :force => true
  create_view "acq_type_property_myuser", "SELECT at.code, at.display_order, atn.name FROM (public.acq_type_property at LEFT JOIN public.acq_type_property_name atn ON (((at.id = atn.acq_type_property_id) AND (atn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "agency_property", "SELECT agency_property.id, agency_property.code_num, agency_property.display_order FROM public.agency_property", :force => true
  create_view "agency_property_location_group", "SELECT agency_property_location_group.id, agency_property_location_group.agency_property_code_num, agency_property_location_group.location_group_port_number FROM public.agency_property_location_group", :force => true
  create_view "agency_property_name", "SELECT agency_property_name.agency_property_id, agency_property_name.iii_language_id, agency_property_name.name FROM public.agency_property_name", :force => true
  create_view "agency_property_myuser", "SELECT ag.code_num AS code, ag.display_order, agn.name FROM (public.agency_property ag LEFT JOIN public.agency_property_name agn ON (((ag.id = agn.agency_property_id) AND (agn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "authority_record", "SELECT authority_record.id, authority_record.record_id, authority_record.marc_type AS marc_type_code, authority_record.code1, authority_record.code2, authority_record.suppress_code, authority_record.is_suppressed FROM iiirecord.authority_record", :force => true
  create_view "record_metadata", "SELECT record_metadata.id, record_metadata.record_type AS record_type_code, record_metadata.record_num, record_metadata.record_creation_date_gmt AS creation_date_gmt, record_metadata.deletion_date AS deletion_date_gmt, record_metadata.campus_code, record_metadata.agency_num AS agency_code_num, record_metadata.num_revisions, record_metadata.record_last_updated AS record_last_updated_gmt, record_metadata.previous_last_updated AS previous_last_updated_gmt FROM iiirecord.record_metadata", :force => true
  create_view "authority_view", "SELECT ar.id, md.record_type AS record_type_code, md.record_num, ar.marc_type AS marc_type_code, ar.code1, ar.code2, ar.suppress_code, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.authority_record ar ON ((ar.record_id = md.id))) WHERE (md.record_type = 'a'::bpchar)", :force => true
  create_view "b2m_category", "SELECT b2m_category.id, b2m_category.code, b2m_category.is_staff_enabled FROM public.b2m_category", :force => true
  create_view "b2m_category_name", "SELECT b2m_category_name.b2m_category_id, b2m_category_name.iii_language_id, b2m_category_name.name FROM public.b2m_category_name", :force => true
  create_view "b2m_category_myuser", "SELECT b.code, b.is_staff_enabled, bn.name FROM (public.b2m_category b LEFT JOIN public.b2m_category_name bn ON (((b.id = bn.b2m_category_id) AND (bn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::text = 'illadm'::text))))))", :force => true
  create_view "backup_admin", "SELECT backup_admin.id, backup_admin.name, backup_admin.email FROM public.backup_admin", :force => true
  create_view "bib_level_property", "SELECT bib_level_property.id, bib_level_property.code, bib_level_property.display_order FROM public.bib_level_property", :force => true
  create_view "bib_level_property_name", "SELECT bib_level_property_name.bib_level_property_id, bib_level_property_name.iii_language_id, bib_level_property_name.name FROM public.bib_level_property_name", :force => true
  create_view "bib_level_property_myuser", "SELECT bl.code, bl.display_order, bln.name FROM (public.bib_level_property bl LEFT JOIN public.bib_level_property_name bln ON (((bl.id = bln.bib_level_property_id) AND (bln.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "bib_record", "SELECT bib_record.id, bib_record.record_id, bib_record.lang AS language_code, bib_record.bcode1, bib_record.bcode2, bib_record.bcode3, bib_record.country AS country_code, bib_record.index_change_count, bib_record.is_on_course_reserve, bib_record.is_right_result_exact, bib_record.allocation_rule AS allocation_rule_code, bib_record.skip_num, bib_record.cataloging_date AS cataloging_date_gmt, bib_record.marc_type AS marc_type_code, bib_record.is_suppressed FROM iiirecord.bib_record", :force => true
  create_view "bib_record_call_number_prefix", "SELECT bib_record_call_number_prefix.id, bib_record_call_number_prefix.bib_record_id, bib_record_call_number_prefix.call_number_prefix FROM iiirecord.bib_record_call_number_prefix", :force => true
  create_view "bib_record_holding_record_link", "SELECT bib_record_holding_record_link.id, bib_record_holding_record_link.bib_record_id, bib_record_holding_record_link.holding_record_id, bib_record_holding_record_link.holdings_display_order FROM iiirecord.bib_record_holding_record_link", :force => true
  create_view "bib_record_item_record_link", "SELECT bib_record_item_record_link.id, bib_record_item_record_link.bib_record_id, bib_record_item_record_link.item_record_id, bib_record_item_record_link.items_display_order, bib_record_item_record_link.bibs_display_order FROM iiirecord.bib_record_item_record_link", :force => true
  create_view "bib_record_location", "SELECT bib_record_location.id, bib_record_location.bib_record_id, bib_record_location.copies, bib_record_location.location_code, bib_record_location.display_order FROM iiirecord.bib_record_location", :force => true
  create_view "bib_record_order_record_link", "SELECT bib_record_order_record_link.id, bib_record_order_record_link.bib_record_id, bib_record_order_record_link.order_record_id, bib_record_order_record_link.orders_display_order FROM iiirecord.bib_record_order_record_link", :force => true
  create_view "bib_record_property", "SELECT bib_record_property.id, bib_record_property.bib_record_id, bib_record_property.title AS best_title, bib_record_property.bib_level_code, bib_record_property.material_code, bib_record_property.publish_year, bib_record_property.best_title_norm, bib_record_property.best_author, bib_record_property.best_author_norm FROM iiirecord.bib_record_property", :force => true
  create_view "bib_record_volume_record_link", "SELECT bib_record_volume_record_link.id, bib_record_volume_record_link.bib_record_id, bib_record_volume_record_link.volume_record_id, bib_record_volume_record_link.volumes_display_order FROM iiirecord.bib_record_volume_record_link", :force => true
  create_view "bib_view", "SELECT br.id, md.record_type AS record_type_code, md.record_num, br.lang AS language_code, br.bcode1, br.bcode2, br.bcode3, br.country AS country_code, br.is_available_at_library, br.index_change_count, br.allocation_rule AS allocation_rule_code, br.is_on_course_reserve, br.is_right_result_exact, br.skip_num, br.cataloging_date AS cataloging_date_gmt, br.marc_type AS marc_type_code, brp.title, md.record_creation_date_gmt FROM ((iiirecord.record_metadata md JOIN iiirecord.bib_record br ON ((br.id = md.id))) JOIN iiirecord.bib_record_property brp ON ((brp.bib_record_id = br.id))) WHERE ((md.record_type = 'b'::bpchar) AND (char_length((md.campus_code)::text) = 0))", :force => true
  create_view "billing_location_property", "SELECT billing_location_property.id, billing_location_property.code, billing_location_property.display_order FROM public.billing_location_property", :force => true
  create_view "billing_location_property_name", "SELECT billing_location_property_name.billing_location_property_id, billing_location_property_name.iii_language_id, billing_location_property_name.name FROM public.billing_location_property_name", :force => true
  create_view "billing_location_property_myuser", "SELECT bl.code, bl.display_order, bln.name FROM (public.billing_location_property bl LEFT JOIN public.billing_location_property_name bln ON (((bl.id = bln.billing_location_property_id) AND (bln.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "booking", "SELECT booking.id, booking.item_record_id, booking.patron_record_id, booking.created_gmt, booking.start_gmt, booking.end_gmt, booking.type_code, booking.prep_period, booking.location_code, booking.delivery_code, booking.location_note, booking.note, booking.event_name FROM iiirecord.booking", :force => true
  create_view "bool_info", "SELECT bool_info.id, bool_info.name, bool_info.max, bool_info.count, bool_info.record_type_code, bool_info.record_range, bool_info.bool_gmt, bool_info.bool_query, bool_info.sql_query, bool_info.is_lookup_call, bool_info.is_lookup_880, bool_info.is_search_holdings, bool_info.sorter_spec, bool_info.lister_spec, bool_info.status_code, bool_info.iii_user_name, bool_info.list_export_spec, bool_info.owner_iii_user_name, bool_info.is_store_field, bool_info.is_card_search FROM report.bool_info", :force => true
  create_view "bool_set", "SELECT bool_set.id, bool_set.record_metadata_id, bool_set.bool_info_id, bool_set.display_order, bool_set.field_key, bool_set.occ_num FROM report.bool_set", :force => true
  create_view "branch", "SELECT branch.id, branch.address, branch.email_source, branch.email_reply_to, branch.address_latitude, branch.address_longitude, branch.code_num FROM public.branch", :force => true
  create_view "branch_change", "SELECT branch_change.id, branch_change.branch_code_num, branch_change.description FROM public.branch_change", :force => true
  create_view "branch_name", "SELECT branch_name.branch_id, branch_name.name, branch_name.lang_id AS iii_language_id FROM public.branch_name", :force => true
  create_view "branch_myuser", "SELECT b.code_num AS code, b.address, b.email_source, b.email_reply_to, b.address_latitude, b.address_longitude, bn.name FROM (public.branch b LEFT JOIN public.branch_name bn ON (((b.id = bn.branch_id) AND (bn.lang_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "catmaint", "SELECT catmaint.id, catmaint.is_locked, catmaint.is_viewed, catmaint.condition_code_num, catmaint.index_tag, catmaint.index_entry, catmaint.record_metadata_id, catmaint.statistics_group_code_num, catmaint.process_gmt, catmaint.program_code, catmaint.iii_user_name, catmaint.one_xx_entry, catmaint.authority_record_metadata_id, catmaint.old_field, catmaint.new_240_field, catmaint.field, catmaint.cataloging_date_gmt, catmaint.index_prev, catmaint.index_next, catmaint.correct_heading, catmaint.author, catmaint.title, catmaint.phrase_entry_id FROM report.catmaint", :force => true
  create_view "checkout", "SELECT checkout.id, checkout.patron_record_id, checkout.item_record_id, checkout.items_display_order, checkout.due_gmt, checkout.loanrule_code_num, checkout.checkout_gmt, checkout.renewal_count, checkout.overdue_count, checkout.overdue_gmt, checkout.recall_gmt, checkout.ptype FROM iiirecord.checkout", :force => true
  create_view "circ_trans", "SELECT circ_trans.id, circ_trans.transaction_gmt, circ_trans.application_name, circ_trans.source_code, circ_trans.op_code, circ_trans.patron_record_id, circ_trans.item_record_id, circ_trans.volume_record_id, circ_trans.bib_record_id, circ_trans.stat_group_code_num, circ_trans.due_date_gmt, circ_trans.count_type_code_num, circ_trans.itype_code_num, circ_trans.icode1, circ_trans.icode2, circ_trans.item_location_code, circ_trans.item_agency_code_num, circ_trans.ptype_code, circ_trans.pcode1, circ_trans.pcode2, circ_trans.pcode3, circ_trans.pcode4, circ_trans.patron_home_library_code, circ_trans.patron_agency_code_num FROM report.circ_trans", :force => true
  create_view "claim_action_property", "SELECT claim_action_property.id, claim_action_property.code, claim_action_property.display_order FROM public.claim_action_property", :force => true
  create_view "claim_action_property_name", "SELECT claim_action_property_name.claim_action_property_id, claim_action_property_name.iii_language_id, claim_action_property_name.name FROM public.claim_action_property_name", :force => true
  create_view "claim_action_property_myuser", "SELECT ca.code, ca.display_order, can.name FROM (public.claim_action_property ca LEFT JOIN public.claim_action_property_name can ON (((ca.id = can.claim_action_property_id) AND (can.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "colagency_criteria", "SELECT colagency_criteria.id, colagency_criteria.name, colagency_criteria.minimum_owed_amt, colagency_criteria.start_date_gmt, colagency_criteria.end_date_gmt, colagency_criteria.grace_period, colagency_criteria.minimum_days_overdue, colagency_criteria.remove_if_less_than_amt, colagency_criteria.agency_fee_amt, colagency_criteria.email_source, colagency_criteria.email_to, colagency_criteria.email_cc, colagency_criteria.email_subject, colagency_criteria.auto_new_submission, colagency_criteria.auto_update_submission FROM report.colagency_criteria", :force => true
  create_view "colagency_criteria_home_libraries", "SELECT colagency_criteria_home_libraries.id, colagency_criteria_home_libraries.colagency_id, colagency_criteria_home_libraries.home_library FROM report.colagency_criteria_home_libraries", :force => true
  create_view "colagency_criteria_ptypes", "SELECT colagency_criteria_ptypes.id, colagency_criteria_ptypes.colagency_id, colagency_criteria_ptypes.ptype FROM report.colagency_criteria_ptypes", :force => true
  create_view "colagency_patron", "SELECT colagency_patron.id, colagency_patron.patron_record_metadata_id, colagency_patron.status, colagency_patron.time_removed_gmt, colagency_patron.time_report_last_run_gmt, colagency_patron.colagency_criteria_metadata_id FROM report.colagency_patron", :force => true
  create_view "collection", "SELECT collection.id, collection.is_default, collection.display_order, collection.avg_width, collection.avg_cost FROM public.collection", :force => true
  create_view "collection_myuser", "SELECT c.id, c.is_default, c.display_order, cn.name FROM (public.collection c LEFT JOIN public.collection_name cn ON (((c.id = cn.collection_id) AND (cn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "contact_record", "SELECT contact_record.id, contact_record.record_id, contact_record.code, contact_record.is_suppressed FROM iiirecord.contact_record", :force => true
  create_view "contact_record_address_type", "SELECT contact_record_address_type.id, contact_record_address_type.code FROM iiirecord.contact_record_address_type", :force => true
  create_view "contact_view", "SELECT cr.id, cr.record_id, md.record_type AS record_type_code, md.record_num, cr.code, md.record_creation_date_gmt, cr.is_suppressed FROM (iiirecord.record_metadata md JOIN iiirecord.contact_record cr ON ((cr.record_id = md.id))) WHERE (md.record_type = 't'::bpchar)", :force => true
  create_view "control_field", "SELECT control_field.id, control_field.record_id, control_field.field_type_tag AS varfield_type_code, control_field.control_num, control_field.p00, control_field.p01, control_field.p02, control_field.p03, control_field.p04, control_field.p05, control_field.p06, control_field.p07, control_field.p08, control_field.p09, control_field.p10, control_field.p11, control_field.p12, control_field.p13, control_field.p14, control_field.p15, control_field.p16, control_field.p17, control_field.p18, control_field.p19, control_field.p20, control_field.p21, control_field.p22, control_field.p23, control_field.p24, control_field.p25, control_field.p26, control_field.p27, control_field.p28, control_field.p29, control_field.p30, control_field.p31, control_field.p32, control_field.p33, control_field.p34, control_field.p35, control_field.p36, control_field.p37, control_field.p38, control_field.p39, control_field.p40, control_field.p41, control_field.p42, control_field.p43, control_field.occ_num, control_field.remainder FROM iiirecord.control_field", :force => true
  create_view "counter", "SELECT counter.code, counter.num FROM report.counter", :force => true
  create_view "country_property", "SELECT country_property.id, country_property.code, country_property.display_order FROM public.country_property", :force => true
  create_view "country_property_name", "SELECT country_property_name.country_property_id, country_property_name.iii_language_id, country_property_name.name FROM public.country_property_name", :force => true
  create_view "country_property_myuser", "SELECT c.code, c.display_order, cn.name FROM (public.country_property c LEFT JOIN public.country_property_name cn ON (((c.id = cn.country_property_id) AND (cn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "course_record", "SELECT course_record.id, course_record.record_id, course_record.begin_date, course_record.end_date, course_record.location_code, course_record.ccode1, course_record.ccode2, course_record.ccode3, course_record.is_suppressed FROM iiirecord.course_record", :force => true
  create_view "course_record_bib_record_link", "SELECT course_record_bib_record_link.id, course_record_bib_record_link.course_record_id, course_record_bib_record_link.bib_record_id, course_record_bib_record_link.status_change_date, course_record_bib_record_link.status_code, course_record_bib_record_link.bibs_display_order FROM iiirecord.course_record_bib_record_link", :force => true
  create_view "course_record_item_record_link", "SELECT course_record_item_record_link.id, course_record_item_record_link.course_record_id, course_record_item_record_link.item_record_id, course_record_item_record_link.status_change_date, course_record_item_record_link.status_code, course_record_item_record_link.items_display_order FROM iiirecord.course_record_item_record_link", :force => true
  create_view "course_view", "SELECT cr.id, md.record_type AS record_type_code, md.record_num, cr.begin_date, cr.end_date, cr.location_code, cr.ccode1, cr.ccode2, cr.ccode3, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.course_record cr ON ((cr.record_id = md.id))) WHERE (md.record_type = 'r'::bpchar)", :force => true
  create_view "darc_service_view", "SELECT darc_service.id AS darc_service_id, darc_service.description AS darc_service_desc, darc_service_group.name AS group_name, darc_service_type.name AS service_name, darc_service_param.paramname AS param, darc_service_param.paramvalue AS value FROM ((((public.darc_service JOIN public.darc_service_type ON ((darc_service.darc_service_type_id = darc_service_type.id))) JOIN public.darc_service_param ON ((darc_service_param.darc_service_id = darc_service.id))) LEFT JOIN public.darc_service_group_service ON ((darc_service_group_service.darc_service_id = darc_service.id))) LEFT JOIN public.darc_service_group ON ((darc_service_group_service.darc_service_group_id = darc_service_group.id))) ORDER BY darc_service_group.name, darc_service_type.name, darc_service_param.paramname", :force => true
  create_view "diacritic_category", "SELECT diacritic_category.id, diacritic_category.name, diacritic_category.is_unicode_style, diacritic_category.is_big5, diacritic_category.is_cccii, diacritic_category.is_eacc, diacritic_category.is_thai, diacritic_category.is_winpage, diacritic_category.is_multibyte, diacritic_category.is_decomposed_character_used, diacritic_category.is_general_rule_enabled, diacritic_category.is_staff_enabled FROM public.diacritic_category", :force => true
  create_view "diacritic_mapping", "SELECT diacritic_mapping.id, diacritic_mapping.diacritic, diacritic_mapping.letter, diacritic_mapping.description, diacritic_mapping.mapped_string, diacritic_mapping.is_preferred, diacritic_mapping.diacritic_category_id, diacritic_mapping.width, diacritic_mapping.display_order FROM public.diacritic_mapping", :force => true
  create_view "ead_hierarchy", "SELECT ead_hierarchy.id, ead_hierarchy.bib_record_id, ead_hierarchy.entry FROM iiirecord.ead_hierarchy", :force => true
  create_view "external_fund_property", "SELECT external_fund_property.id, external_fund_property.accounting_unit_id, external_fund_property.code_num FROM public.external_fund_property", :force => true
  create_view "external_fund_property_name", "SELECT external_fund_property_name.external_fund_property_id, external_fund_property_name.iii_language_id, external_fund_property_name.name FROM public.external_fund_property_name", :force => true
  create_view "external_fund_property_myuser", "SELECT ef.code_num AS code, ef.accounting_unit_id, efn.name FROM (public.external_fund_property ef LEFT JOIN public.external_fund_property_name efn ON (((ef.id = efn.external_fund_property_id) AND (efn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "fine", "SELECT fine.id, fine.patron_record_id, fine.assessed_gmt, fine.invoice_num, fine.item_charge_amt, fine.processing_fee_amt, fine.billing_fee_amt, fine.charge_code, fine.charge_location_code, fine.paid_gmt, fine.terminal_num, fine.paid_amt, fine.initials, fine.created_code, fine.is_print_bill, fine.description, fine.item_record_metadata_id, fine.checkout_gmt, fine.due_gmt, fine.returned_gmt, fine.loanrule_code_num, fine.title, fine.original_patron_record_metadata_id, fine.original_transfer_gmt, fine.previous_invoice_num, fine.display_order FROM iiirecord.fine", :force => true
  create_view "fines_paid", "SELECT fines_paid.id, fines_paid.fine_assessed_date_gmt, fines_paid.patron_record_metadata_id, fines_paid.item_charge_amt, fines_paid.processing_fee_amt, fines_paid.billing_fee_amt, fines_paid.charge_type_code, fines_paid.charge_location_code, fines_paid.paid_date_gmt, fines_paid.tty_num, fines_paid.last_paid_amt, fines_paid.iii_user_name, fines_paid.fine_creation_mode_code, fines_paid.print_bill_code, fines_paid.item_record_metadata_id, fines_paid.checked_out_date_gmt, fines_paid.due_date_gmt, fines_paid.returned_date_gmt, fines_paid.loan_rule_code_num, fines_paid.description, fines_paid.paid_now_amt, fines_paid.payment_status_code, fines_paid.payment_type_code, fines_paid.payment_note, fines_paid.transaction_id, fines_paid.time_written_gmt, fines_paid.invoice_num, fines_paid.old_invoice_num FROM iiirecord.fines_paid", :force => true
  create_view "firm_property", "SELECT firm_property.id, firm_property.code, firm_property.category_code, firm_property.contact_name, firm_property.contact_addr1, firm_property.contact_addr2, firm_property.contact_addr3, firm_property.contact_addr4, firm_property.telephone, firm_property.paid_thru_date, firm_property.payment_info, firm_property.note1, firm_property.note2 FROM public.firm_property", :force => true
  create_view "firm_property_name", "SELECT firm_property_name.firm_property_id, firm_property_name.iii_language_id, firm_property_name.name FROM public.firm_property_name", :force => true
  create_view "firm_property_myuser", "SELECT f.code, f.category_code, f.contact_name, f.contact_addr1, f.contact_addr2, f.contact_addr3, f.contact_addr4, f.telephone, f.paid_thru_date, f.payment_info, f.note1, f.note2, fn.name FROM (public.firm_property f LEFT JOIN public.firm_property_name fn ON (((f.id = fn.firm_property_id) AND (fn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "fixfld_type", "SELECT fixfld_property.id, fixfld_property.code, fixfld_property.display_order, fixfld_property.record_type_code, fixfld_property.is_enabled FROM public.fixfld_property", :force => true
  create_view "fixfld_type_myuser", "SELECT fld.code, fld.display_order, fldn.name FROM (public.fixfld_property fld LEFT JOIN public.fixfld_property_name fldn ON (((fld.id = fldn.fixfld_property_id) AND (fldn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "fixfld_type_name", "SELECT fixfld_property_name.fixfld_property_id, fixfld_property_name.iii_language_id, fixfld_property_name.name FROM public.fixfld_property_name", :force => true
  create_view "foreign_currency", "SELECT foreign_currency.id, foreign_currency.accounting_code_num, foreign_currency.code, foreign_currency.rate, foreign_currency.description, foreign_currency.format FROM public.foreign_currency", :force => true
  create_view "form_property", "SELECT form_property.id, form_property.code, form_property.display_order FROM public.form_property", :force => true
  create_view "form_property_name", "SELECT form_property_name.form_property_id, form_property_name.iii_language_id, form_property_name.name FROM public.form_property_name", :force => true
  create_view "form_property_myuser", "SELECT f.code, f.display_order, fn.name FROM (public.form_property f LEFT JOIN public.form_property_name fn ON (((f.id = fn.form_property_id) AND (fn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "function", "SELECT function.id, function.display_order, function.code, function.function_category_id FROM iiienv.function", :force => true
  create_view "function_category", "SELECT function_category.id, function_category.display_order, function_category.code FROM iiienv.function_category", :force => true
  create_view "fund_master", "SELECT fund_master.id, fund_master.accounting_unit_id, fund_master.code_num, fund_master.code FROM public.fund_master", :force => true
  create_view "fund_property", "SELECT fund_property.id, fund_property.fund_master_id, fund_property.fund_type_id, fund_property.external_fund_property_id, fund_property.warning_percent, fund_property.discount_percent, fund_property.user_code1, fund_property.user_code2, fund_property.user_code3, fund_property.is_active FROM public.fund_property", :force => true
  create_view "fund_summary", "SELECT fund_summary.id, fund_summary.fund_property_id, fund_summary.appropriation, fund_summary.expenditure, fund_summary.encumbrance, fund_summary.num_orders, fund_summary.num_payments FROM public.fund_summary", :force => true
  create_view "fund_type", "SELECT fund_type.id, fund_type.code FROM public.fund_type", :force => true
  create_view "fund", "SELECT au.code_num AS acct_unit, ft.code AS fund_type, fm.code AS fund_code, efp.code_num AS external_fund, fs.appropriation, fs.expenditure, fs.encumbrance, fs.num_orders, fs.num_payments, fp.warning_percent, fp.discount_percent FROM (public.fund_type ft JOIN (public.accounting_unit au JOIN (public.fund_master fm JOIN (public.fund_summary fs JOIN (public.fund_property fp LEFT JOIN public.external_fund_property efp ON ((fp.external_fund_property_id = efp.id))) ON ((fs.fund_property_id = fp.id))) ON ((fm.id = fp.fund_master_id))) ON ((au.id = fm.accounting_unit_id))) ON ((ft.id = fp.fund_type_id))) ORDER BY au.code_num, ft.code, fm.code", :force => true
  create_view "fund_property_name", "SELECT fund_property_name.fund_property_id, fund_property_name.iii_language_id, fund_property_name.name, fund_property_name.note1, fund_property_name.note2 FROM public.fund_property_name", :force => true
  create_view "fund_myuser", "SELECT au.code_num AS acct_unit, ft.code AS fund_type, fm.id AS fund_master_id, fm.code AS fund_code, efp.code_num AS external_fund_code_num, fs.appropriation, fs.expenditure, fs.encumbrance, fs.num_orders, fs.num_payments, fp.warning_percent, fp.discount_percent, fpn.name, fpn.note1, fpn.note2 FROM ((((((public.accounting_unit au JOIN public.fund_master fm ON ((au.id = fm.accounting_unit_id))) JOIN public.fund_property fp ON ((fm.id = fp.fund_master_id))) JOIN public.fund_summary fs ON ((fp.id = fs.fund_property_id))) JOIN public.fund_property_name fpn ON ((fp.id = fpn.fund_property_id))) JOIN public.fund_type ft ON ((ft.id = fp.fund_type_id))) LEFT JOIN public.external_fund_property efp ON ((efp.id = fp.external_fund_property_id))) WHERE (fpn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))", :force => true
  create_view "fund_summary_subfund", "SELECT fund_summary_subfund.fund_summary_id, fund_summary_subfund.code, fund_summary_subfund.value FROM public.fund_summary_subfund", :force => true
  create_view "fund_type_summary", "SELECT fund_type_summary.accounting_unit_id, fund_type_summary.fund_type_id, fund_type_summary.last_lien_num, fund_type_summary.last_voucher_num FROM public.fund_type_summary", :force => true
  create_view "gtype_property", "SELECT gtype_property.id, gtype_property.code_num, gtype_property.display_order FROM public.gtype_property", :force => true
  create_view "gtype_property_name", "SELECT gtype_property_name.gtype_property_id, gtype_property_name.iii_language_id, gtype_property_name.name FROM public.gtype_property_name", :force => true
  create_view "gtype_property_myuser", "SELECT g.code_num AS code, g.display_order, gn.name FROM (public.gtype_property g LEFT JOIN public.gtype_property_name gn ON (((g.id = gn.gtype_property_id) AND (gn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "hold", "SELECT hold.id, hold.patron_record_id, hold.record_id, hold.placed_gmt, hold.is_frozen, hold.delay_days, hold.location_code, hold.expires_gmt, hold.status, hold.is_ir, hold.pickup_location_code, hold.is_ill, hold.note, hold.ir_pickup_location_code, hold.ir_print_name, hold.ir_delivery_stop_name, hold.is_ir_converted_request, hold.patron_records_display_order, hold.records_display_order FROM iiirecord.hold", :force => true
  create_view "holding_record", "SELECT holding_record.id, holding_record.record_id, holding_record.inherit_loc AS is_inherit_loc, holding_record.allocation_rule AS allocation_rule_code, holding_record.accounting_unit_code_num, holding_record.label_code, holding_record.serial_code1 AS scode1, holding_record.serial_code2 AS scode2, holding_record.claimon_date_gmt, holding_record.receiving_location_code, holding_record.vendor_code, holding_record.serial_code3 AS scode3, holding_record.serial_code4 AS scode4, holding_record.update_cnt, holding_record.piece_cnt, holding_record.echeckin_code, holding_record.media_type_code, holding_record.is_suppressed FROM iiirecord.holding_record", :force => true
  create_view "holding_record_address_type", "SELECT holding_record_address_type.id, holding_record_address_type.code FROM iiirecord.holding_record_address_type", :force => true
  create_view "holding_record_box", "SELECT holding_record_box.id, holding_record_box.holding_record_cardlink_id, holding_record_box.box_count, holding_record_box.enum_level_a, holding_record_box.enum_level_b, holding_record_box.enum_level_c, holding_record_box.enum_level_d, holding_record_box.enum_level_e, holding_record_box.enum_level_f, holding_record_box.enum_level_g, holding_record_box.enum_level_h, holding_record_box.chron_level_i, holding_record_box.chron_level_i_trans_date, holding_record_box.chron_level_j, holding_record_box.chron_level_j_trans_date, holding_record_box.chron_level_k, holding_record_box.chron_level_k_trans_date, holding_record_box.chron_level_l, holding_record_box.chron_level_l_trans_date, holding_record_box.chron_level_m, holding_record_box.chron_level_m_trans_date, holding_record_box.note, holding_record_box.box_status_code, holding_record_box.claim_cnt, holding_record_box.copies_cnt, holding_record_box.url, holding_record_box.is_suppressed, holding_record_box.staff_note FROM iiirecord.holding_record_box", :force => true
  create_view "holding_record_box_item", "SELECT holding_record_box_item.id, holding_record_box_item.holding_record_box_id, holding_record_box_item.item_record_metadata_id FROM iiirecord.holding_record_box_item", :force => true
  create_view "holding_record_card", "SELECT holding_record_card.id, holding_record_card.holding_record_id, holding_record_card.status_code, holding_record_card.display_format_code, holding_record_card.is_suppress_opac_display, holding_record_card.order_record_metadata_id, holding_record_card.is_create_item, holding_record_card.is_usmarc, holding_record_card.is_marc, holding_record_card.is_use_default_enum, holding_record_card.is_use_default_date, holding_record_card.update_method AS update_method_code FROM iiirecord.holding_record_card", :force => true
  create_view "holding_record_cardlink", "SELECT holding_record_cardlink.id, holding_record_cardlink.holding_record_card_id, holding_record_cardlink.card_type AS card_type_code, holding_record_cardlink.link_count, holding_record_cardlink.enum_level_a, holding_record_cardlink.enum_level_a_disp_mode, holding_record_cardlink.enum_level_b, holding_record_cardlink.enum_level_b_limit, holding_record_cardlink.enum_level_b_rollover, holding_record_cardlink.enum_level_b_disp_mode, holding_record_cardlink.enum_level_c, holding_record_cardlink.enum_level_c_limit, holding_record_cardlink.enum_level_c_rollover, holding_record_cardlink.enum_level_c_disp_mode, holding_record_cardlink.enum_level_d, holding_record_cardlink.enum_level_d_limit, holding_record_cardlink.enum_level_d_rollover, holding_record_cardlink.enum_level_d_disp_mode, holding_record_cardlink.enum_level_e, holding_record_cardlink.enum_level_e_limit, holding_record_cardlink.enum_level_e_rollover, holding_record_cardlink.enum_level_e_disp_mode, holding_record_cardlink.enum_level_f, holding_record_cardlink.enum_level_f_limit, holding_record_cardlink.enum_level_f_rollover, holding_record_cardlink.enum_level_f_disp_mode, holding_record_cardlink.alt_enum_level_g, holding_record_cardlink.alt_enum_level_g_disp_mode, holding_record_cardlink.alt_enum_level_h, holding_record_cardlink.alt_enum_level_h_disp_mode, holding_record_cardlink.chron_level_i, holding_record_cardlink.chron_level_j, holding_record_cardlink.chron_level_k, holding_record_cardlink.chron_level_l, holding_record_cardlink.chron_level_m, holding_record_cardlink.frequency AS frequency_code, holding_record_cardlink.calendar_change, holding_record_cardlink.opac_label, holding_record_cardlink.is_advanced, holding_record_cardlink.days_btw_iss, holding_record_cardlink.claim_days, holding_record_cardlink.bind_unit, holding_record_cardlink.bind_delay, holding_record_cardlink.is_bind_with_issue, holding_record_cardlink.is_use_autumn, holding_record_cardlink.enum_level_count, holding_record_cardlink.alt_enum_level_count, holding_record_cardlink.current_item, holding_record_cardlink.alt_enum_level_h_limit, holding_record_cardlink.alt_enum_level_h_rollover FROM iiirecord.holding_record_cardlink", :force => true
  create_view "holding_record_erm_holding", "SELECT holding_record_erm_holding.id, holding_record_erm_holding.holding_record_id, holding_record_erm_holding.varfield_type_code, holding_record_erm_holding.marc_tag, holding_record_erm_holding.marc_ind1, holding_record_erm_holding.marc_ind2, holding_record_erm_holding.occ_num, holding_record_erm_holding.field_content FROM iiirecord.holding_record_erm_holding", :force => true
  create_view "holding_record_item_record_link", "SELECT holding_record_item_record_link.id, holding_record_item_record_link.holding_record_id, holding_record_item_record_link.item_record_id, holding_record_item_record_link.items_display_order FROM iiirecord.holding_record_item_record_link", :force => true
  create_view "holding_record_location", "SELECT holding_record_location.id, holding_record_location.holding_record_id, holding_record_location.copies, holding_record_location.location_code, holding_record_location.display_order FROM iiirecord.holding_record_location", :force => true
  create_view "holding_record_routing", "SELECT holding_record_routing.id, holding_record_routing.holding_record_id, holding_record_routing.copy_num, holding_record_routing.display_order, holding_record_routing.is_patron_routing, holding_record_routing.priority_num, holding_record_routing.patron_record_metadata_id, holding_record_routing.routefile_code_num, holding_record_routing.initials AS iii_user_name, holding_record_routing.field_position FROM iiirecord.holding_record_routing", :force => true
  create_view "holding_view", "SELECT hr.id, md.record_type AS record_type_code, md.record_num, hr.inherit_loc AS is_inherit_loc, hr.allocation_rule AS allocation_rule_code, hr.accounting_unit_code_num, hr.label_code, hr.serial_code1 AS scode1, hr.serial_code2 AS scode2, hr.update_cnt, hr.piece_cnt, hr.echeckin_code, hr.media_type_code, hr.is_suppressed, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.holding_record hr ON ((hr.record_id = md.id))) WHERE (md.record_type = 'c'::bpchar)", :force => true
  create_view "iii_language", "SELECT iii_language.id, iii_language.code, iii_language.description, iii_language.staff_enabled, iii_language.public_enabled, iii_language.display_order, iii_language.is_right_to_left FROM public.iii_language", :force => true
  create_view "iii_language_myuser", "SELECT l.code, l.description, l.staff_enabled, l.public_enabled, l.display_order, l.is_right_to_left FROM (public.iii_language l LEFT JOIN public.iii_language_desc ld ON (((l.id = ld.iii_language_id) AND (ld.lang_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "iii_language_name", "SELECT iii_language_desc.iii_language_id, iii_language_desc.description, iii_language_desc.lang_id AS name_iii_language_id FROM public.iii_language_desc", :force => true
  create_view "iii_role", "SELECT iii_role.id, iii_role.code, iii_role.iii_role_category_id, iii_role.is_disabled_during_read_only_access FROM iiienv.iii_role WHERE (iii_role.is_iii_only = false)", :force => true
  create_view "iii_role_category", "SELECT iii_role_category.id, iii_role_category.code FROM iiienv.iii_role_category", :force => true
  create_view "iii_role_category_name", "SELECT iii_role_category_name.iii_language_id, iii_role_category_name.iii_role_category_id, iii_role_category_name.name FROM iiienv.iii_role_category_name", :force => true
  create_view "iii_role_name", "SELECT iii_role_name.iii_role_id, iii_role_name.iii_language_id, iii_role_name.name FROM iiienv.iii_role_name", :force => true
  create_view "iii_user_fund_master", "SELECT iii_user_fund_master.id, iii_user_fund_master.iii_user_id, iii_user_fund_master.fund_master_id FROM iiienv.iii_user_fund_master", :force => true
  create_view "iii_user_group", "SELECT iii_user_group.id, iii_user_group.code, iii_user_group.concurrent_max, iii_user_group.is_independent FROM iiienv.iii_user_group WHERE (iii_user_group.is_unlimted = false)", :force => true
  create_view "iii_user_iii_role", "SELECT iii_user_iii_role.iii_user_id, iii_user_iii_role.iii_role_id FROM iiienv.iii_user_iii_role", :force => true
  create_view "iii_user_location", "SELECT iii_user_location.id, iii_user_location.iii_user_id, iii_user_location.location_code FROM iiienv.iii_user_location", :force => true
  create_view "iii_user_workflow", "SELECT iii_user_workflow.id, iii_user_workflow.iii_user_id, iii_user_workflow.workflow_id, iii_user_workflow.display_order FROM iiienv.iii_user_workflow", :force => true
  create_view "invoice_record", "SELECT invoice_record.id, invoice_record.record_id, invoice_record.accounting_unit_code_num, invoice_record.invoice_date AS invoice_date_gmt, invoice_record.paid_date AS paid_date_gmt, invoice_record.status_code, invoice_record.posted_date AS posted_data_gmt, invoice_record.is_paid_date_received_date, invoice_record.ncode1, invoice_record.ncode2, invoice_record.ncode3, invoice_record.invoice_number_text, invoice_record.iii_user_name, invoice_record.forcur_code AS foreign_currency_code, invoice_record.forcur_format AS foreign_currency_format, invoice_record.forcur_exchange_rate AS foreign_currency_exchange_rate, invoice_record.tax_fund_code, invoice_record.tax_type AS tax_type_code, invoice_record.discount_amt, invoice_record.grand_total_amt, invoice_record.subtotal_amt, invoice_record.shipping_amt, invoice_record.total_tax_amt, invoice_record.use_tax_fund_code, invoice_record.use_tax_percentage_rate, invoice_record.use_tax_type AS use_tax_type_code, invoice_record.use_tax_ship_service_code, invoice_record.is_suppressed FROM iiirecord.invoice_record", :force => true
  create_view "invoice_record_line", "SELECT invoice_record_line.id, invoice_record_line.invoice_record_id, invoice_record_line.order_record_metadata_id, invoice_record_line.paid_amt, invoice_record_line.lien_amt, invoice_record_line.lien_flag, invoice_record_line.list_price, invoice_record_line.fund_code, invoice_record_line.subfund_num, invoice_record_line.copies_paid_cnt, invoice_record_line.external_fund_code_num, invoice_record_line.status_code, invoice_record_line.note, invoice_record_line.is_single_copy_partial_pmt, invoice_record_line.title, invoice_record_line.multiflag_code, invoice_record_line.line_level_tax, invoice_record_line.vendor_code, invoice_record_line.accounting_transaction_voucher_num, invoice_record_line.accounting_transaction_voucher_seq_num, invoice_record_line.line_cnt, invoice_record_line.invoice_record_vendor_summary_id, invoice_record_line.is_use_tax FROM iiirecord.invoice_record_line", :force => true
  create_view "invoice_record_vendor_summary", "SELECT invoice_record_vendor_summary.id, invoice_record_vendor_summary.invoice_record_id, invoice_record_vendor_summary.vendor_code, invoice_record_vendor_summary.vendor_address_line1, invoice_record_vendor_summary.voucher_num, invoice_record_vendor_summary.voucher_total, invoice_record_vendor_summary.display_order FROM iiirecord.invoice_record_vendor_summary", :force => true
  create_view "invoice_view", "SELECT ir.id, md.record_type AS record_type_code, md.record_num, ir.accounting_unit_code_num, ir.invoice_date AS invoice_date_gmt, ir.paid_date AS paid_date_gmt, ir.status_code, ir.posted_date AS posted_date_gmt, ir.is_paid_date_received_date, ir.ncode1, ir.ncode2, ir.ncode3, ir.invoice_number_text, ir.iii_user_name, ir.forcur_code AS foreign_currency_code, ir.forcur_format AS foreign_currency_format, ir.forcur_exchange_rate AS foreign_currency_exchange_rate, ir.tax_fund_code, ir.tax_type AS tax_type_code, ir.discount_amt, ir.grand_total_amt, ir.subtotal_amt, ir.shipping_amt, ir.total_tax_amt, ir.use_tax_fund_code, ir.use_tax_percentage_rate, ir.use_tax_type AS use_tax_type_code, ir.use_tax_ship_service_code, ir.is_suppressed, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.invoice_record ir ON ((ir.record_id = md.id))) WHERE (md.record_type = 'n'::bpchar)", :force => true
  create_view "item_circ_history", "SELECT item_circ_history.id, item_circ_history.item_record_metadata_id, item_circ_history.patron_record_metadata_id, item_circ_history.checkout_gmt, item_circ_history.checkin_gmt FROM report.item_circ_history", :force => true
  create_view "item_record", "SELECT item_record.id, item_record.record_id, item_record.icode1, item_record.icode2, item_record.itype AS itype_code_num, item_record.location AS location_code, item_record.agency AS agency_code_num, item_record.status AS item_status_code, item_record.inherit_loc AS is_inherit_loc, item_record.price, item_record.last_checkin_gmt, item_record.checkout_total, item_record.renewal_total, item_record.last_year_to_date_checkout_total, item_record.year_to_date_checkout_total, item_record.is_bib_hold, item_record.copy_num, item_record.checkout_statistic_group_code_num, item_record.last_patron_record_metadata_id, item_record.inventory_gmt, item_record.checkin_statistics_group_code_num, item_record.use3_count, item_record.last_checkout_gmt, item_record.internal_use_count, item_record.copy_use_count, item_record.item_message_code, item_record.opac_message_code, item_record.virtual_type AS virtual_type_code, item_record.virtual_item_central_code_num, item_record.holdings_code, item_record.save_itype AS save_itype_code_num, item_record.save_location AS save_location_code, item_record.save_checkout_total, item_record.old_location AS old_location_code, item_record.distance_learning_status, item_record.is_suppressed FROM iiirecord.item_record", :force => true
  create_view "item_record_property", "SELECT item_record_property.id, item_record_property.item_record_id, item_record_property.callnumber AS call_number, item_record_property.callnumber_norm AS call_number_norm, item_record_property.barcode FROM iiirecord.item_record_property", :force => true
  create_view "item_status_property", "SELECT item_status_property.id, item_status_property.code, item_status_property.display_order FROM public.item_status_property", :force => true
  create_view "item_status_property_name", "SELECT item_status_property_name.item_status_property_id, item_status_property_name.iii_language_id, item_status_property_name.name FROM public.item_status_property_name", :force => true
  create_view "item_status_property_myuser", "SELECT isp.code, isp.display_order, ispn.name FROM (public.item_status_property isp LEFT JOIN public.item_status_property_name ispn ON (((isp.id = ispn.item_status_property_id) AND (ispn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "item_view", "SELECT ir.id, md.record_type AS record_type_code, md.record_num, irp.barcode, ir.icode1, ir.icode2, ir.itype AS itype_code_num, ir.location AS location_code, ir.agency AS agency_code_num, ir.status AS item_status_code, ir.inherit_loc AS is_inherit_loc, ir.price, ir.last_checkin_gmt, ir.checkout_total, ir.renewal_total, ir.last_year_to_date_checkout_total, ir.year_to_date_checkout_total, ir.is_bib_hold, ir.copy_num, ir.checkout_statistic_group_code_num, ir.last_patron_record_metadata_id, ir.inventory_gmt, ir.checkin_statistics_group_code_num, ir.use3_count, ir.last_checkout_gmt, ir.internal_use_count, ir.copy_use_count, ir.item_message_code, ir.opac_message_code, ir.virtual_type AS virtual_type_code, ir.virtual_item_central_code_num, ir.holdings_code, ir.save_itype AS save_itype_code_num, ir.save_location AS save_location_code, ir.save_checkout_total, ir.old_location AS old_location_code, ir.distance_learning_status, ir.is_suppressed, md.record_creation_date_gmt FROM ((iiirecord.record_metadata md JOIN iiirecord.item_record ir ON ((ir.id = md.id))) LEFT JOIN iiirecord.item_record_property irp ON ((irp.item_record_id = ir.id))) WHERE ((md.record_type = 'i'::bpchar) AND (char_length((md.campus_code)::text) = 0))", :force => true
  create_view "itype_property", "SELECT itype_property.id, itype_property.code_num, itype_property.display_order, itype_property.itype_property_category_id, itype_property.physical_format_id, itype_property.target_audience_id, itype_property.collection_id FROM public.itype_property", :force => true
  create_view "itype_property_category", "SELECT itype_property_category.id, itype_property_category.display_order, itype_property_category.is_default FROM public.itype_property_category", :force => true
  create_view "itype_property_category_name", "SELECT itype_property_category_name.itype_property_category_id, itype_property_category_name.name, itype_property_category_name.iii_language_id FROM public.itype_property_category_name", :force => true
  create_view "itype_property_category_myuser", "SELECT i.code_num AS code, i.display_order, i.itype_property_category_id, i.physical_format_id, i.target_audience_id, icn.name FROM ((public.itype_property i LEFT JOIN public.itype_property_category ic ON ((i.itype_property_category_id = ic.id))) LEFT JOIN public.itype_property_category_name icn ON (((icn.itype_property_category_id = ic.id) AND (icn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "itype_property_name", "SELECT itype_property_name.itype_property_id, itype_property_name.iii_language_id, itype_property_name.name FROM public.itype_property_name", :force => true
  create_view "itype_property_myuser", "SELECT it.code_num AS code, it.display_order, it.itype_property_category_id, it.physical_format_id, it.target_audience_id, itn.name FROM (public.itype_property it LEFT JOIN public.itype_property_name itn ON (((it.id = itn.itype_property_id) AND (itn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "keyword_synonym", "SELECT keyword_synonym.id, keyword_synonym.keyword, keyword_synonym.synonym FROM public.keyword_synonym", :force => true
  create_view "language_property", "SELECT language_property.id, language_property.code, language_property.display_order, language_property.is_public FROM public.language_property", :force => true
  create_view "language_property_name", "SELECT language_property_name.language_property_id, language_property_name.iii_language_id, language_property_name.name FROM public.language_property_name", :force => true
  create_view "language_property_myuser", "SELECT l.code, l.display_order, l.is_public, ln.name FROM (public.language_property l LEFT JOIN public.language_property_name ln ON (((l.id = ln.language_property_id) AND (ln.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "leader_field", "SELECT leader_field.id, leader_field.record_id, leader_field.record_status_code, leader_field.record_type_code, leader_field.bib_level_code, leader_field.control_type_code, leader_field.char_encoding_scheme_code, leader_field.encoding_level_code, leader_field.descriptive_cat_form_code, leader_field.multipart_level_code FROM iiirecord.leader_field", :force => true
  create_view "license_record", "SELECT license_record.id, license_record.record_id, license_record.accounting_unit_code_num, license_record.confidential_code, license_record.auto_renew_code, license_record.status_code, license_record.type_code, license_record.change_to_code, license_record.breach_procedure_code, license_record.termination_procedure_code, license_record.perpetual_access_code, license_record.archival_provisions_code, license_record.warranty_code, license_record.disability_compliance_code, license_record.performance_requirement_code, license_record.liability_code, license_record.idemnification_code, license_record.law_and_venue_code, license_record.user_confidentiality_code, license_record.suppress_code, license_record.lcode1, license_record.lcode2, license_record.lcode3, license_record.concurrent_users_count, license_record.license_sign_gmt, license_record.licensor_sign_gmt, license_record.contract_start_gmt, license_record.contract_end_gmt, license_record.breach_cure, license_record.cancellation_notice, license_record.is_suppressed, license_record.ldate4, license_record.language_code, license_record.country_code, license_record.llang2 FROM iiirecord.license_record", :force => true
  create_view "license_view", "SELECT lr.id, md.record_type AS record_type_code, md.record_num, lr.accounting_unit_code_num, lr.confidential_code, lr.auto_renew_code, lr.status_code, lr.type_code, lr.change_to_code, lr.breach_procedure_code, lr.termination_procedure_code, lr.perpetual_access_code, lr.archival_provisions_code, lr.warranty_code, lr.disability_compliance_code, lr.performance_requirement_code, lr.liability_code, lr.idemnification_code, lr.law_and_venue_code, lr.user_confidentiality_code, lr.suppress_code, lr.lcode1, lr.lcode2, lr.lcode3, lr.concurrent_users_count, lr.license_sign_gmt, lr.licensor_sign_gmt, lr.contract_start_gmt, lr.contract_end_gmt, lr.breach_cure, lr.cancellation_notice, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.license_record lr ON ((lr.record_id = md.id))) WHERE (md.record_type = 'l'::bpchar)", :force => true
  create_view "location", "SELECT location.id, location.code, location.branch_code_num, location.parent_location_code, location.is_public, location.is_requestable FROM public.location", :force => true
  create_view "location_change", "SELECT location_change.id, location_change.location_code, location_change.description FROM public.location_change", :force => true
  create_view "location_name", "SELECT location_name.location_id, location_name.name, location_name.lang_id AS iii_language_id FROM public.location_name", :force => true
  create_view "location_myuser", "SELECT l.code, l.branch_code_num, l.parent_location_code, l.is_public, ln.name FROM (public.location l LEFT JOIN public.location_name ln ON (((l.id = ln.location_id) AND (ln.lang_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "location_property_type", "SELECT location_property_type.id, location_property_type.code, location_property_type.display_order, location_property_type.default_value, location_property_type.is_single_value, location_property_type.is_enabled FROM public.location_property_type", :force => true
  create_view "location_property_type_name", "SELECT location_property_type_name.id, location_property_type_name.location_property_type_id, location_property_type_name.iii_language_id, location_property_type_name.name FROM public.location_property_type_name", :force => true
  create_view "location_property_type_myuser", "SELECT l.code, l.display_order, l.default_value, l.is_single_value, l.is_enabled, ln.name FROM (public.location_property_type l LEFT JOIN public.location_property_type_name ln ON (((l.id = ln.location_property_type_id) AND (ln.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "location_property_value", "SELECT location_property_value.id, location_property_value.location_property_type_id, location_property_value.location_id, location_property_value.value FROM public.location_property_value", :force => true
  create_view "m2bmap_category", "SELECT m2bmap_category.id, m2bmap_category.name, m2bmap_category.original_delimiter, m2bmap_category.is_case_sensitive, m2bmap_category.is_bar_subfield, m2bmap_category.is_chinese, m2bmap_category.is_stop_on_map FROM public.m2bmap_category", :force => true
  create_view "m2bmap_entry", "SELECT m2bmap_entry.id, m2bmap_entry.m2bmap_category_id, m2bmap_entry.display_order, m2bmap_entry.comparison, m2bmap_entry.replacement FROM public.m2bmap_entry", :force => true
  create_view "marc_export_format", "SELECT marc_export_format.id, marc_export_format.code, marc_export_format.code_name, marc_export_format.is_staff_enabled FROM public.marc_export_format", :force => true
  create_view "marc_preference", "SELECT marc_preference.id, marc_preference.iii_user_name, marc_preference.diacritic_category_id, marc_preference.marc_export_format_id, marc_preference.b2m_category_code, marc_preference.is_default_preference FROM public.marc_preference", :force => true
  create_view "marclabel_type", "SELECT marclabel_type.id, marclabel_type.record_type_code, marclabel_type.varfield_type_code, marclabel_type.marctag_pattern AS marc_tag_pattern, marclabel_type.display_order FROM public.marclabel_type", :force => true
  create_view "marclabel_type_name", "SELECT marclabel_type_name.marclabel_type_id, marclabel_type_name.iii_language_id, marclabel_type_name.name FROM public.marclabel_type_name", :force => true
  create_view "marclabel_type_myuser", "SELECT m.record_type_code, m.varfield_type_code, m.marctag_pattern, m.display_order, mn.name FROM (public.marclabel_type m LEFT JOIN public.marclabel_type_name mn ON (((m.id = mn.marclabel_type_id) AND (mn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "material_property", "SELECT material_property.id, material_property.code, material_property.display_order, material_property.is_public, material_property.material_property_category_id, material_property.physical_format_id FROM public.material_property", :force => true
  create_view "material_property_category", "SELECT material_property_category.id, material_property_category.display_order, material_property_category.is_default FROM public.material_property_category", :force => true
  create_view "material_property_category_name", "SELECT material_property_category_name.material_property_category_id, material_property_category_name.name, material_property_category_name.iii_language_id FROM public.material_property_category_name", :force => true
  create_view "material_property_category_myuser", "SELECT m.code, mc.display_order, mc.is_default, mcn.name FROM ((public.material_property m LEFT JOIN public.material_property_category mc ON ((m.material_property_category_id = mc.id))) LEFT JOIN public.material_property_category_name mcn ON (((mcn.material_property_category_id = mc.id) AND (mcn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "material_property_name", "SELECT material_property_name.material_property_id, material_property_name.iii_language_id, material_property_name.name, material_property_name.facet_text FROM public.material_property_name", :force => true
  create_view "material_property_myuser", "SELECT mp.code, mp.display_order, mp.is_public, mp.material_property_category_id, mp.physical_format_id, mpn.name FROM (public.material_property mp LEFT JOIN public.material_property_name mpn ON (((mp.id = mpn.material_property_id) AND (mpn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "mblock_property", "SELECT mblock_property.id, mblock_property.code, mblock_property.display_order FROM public.mblock_property", :force => true
  create_view "mblock_property_name", "SELECT mblock_property_name.mblock_property_id, mblock_property_name.iii_language_id, mblock_property_name.name FROM public.mblock_property_name", :force => true
  create_view "mblock_property_myuser", "SELECT m.code, m.display_order, mn.name FROM (public.mblock_property m LEFT JOIN public.mblock_property_name mn ON (((m.id = mn.mblock_property_id) AND (mn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "network_access_view", "SELECT nap.port, nai.is_enabled, nai.is_super_user, nai.ip_range, nal.is_accessible, nal.login_name, nal.service_level, nai.comment FROM ((public.network_access_port nap LEFT JOIN public.network_access_level nal ON ((nal.network_access_port_id = nap.id))) LEFT JOIN public.network_access_ip nai ON ((nai.network_access_level_id = nal.id)))", :force => true
  create_view "notification_medium_property", "SELECT notification_medium_property.id, notification_medium_property.code, notification_medium_property.display_order FROM public.notification_medium_property", :force => true
  create_view "notification_medium_property_name", "SELECT notification_medium_property_name.notification_medium_property_id, notification_medium_property_name.iii_language_id, notification_medium_property_name.name FROM public.notification_medium_property_name", :force => true
  create_view "notification_medium_property_myuser", "SELECT n.code, n.display_order, nn.name FROM (public.notification_medium_property n LEFT JOIN public.notification_medium_property_name nn ON (((n.id = nn.notification_medium_property_id) AND (nn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "oai_crosswalk", "SELECT oai_crosswalk.id, oai_crosswalk.marc_type, oai_crosswalk.metadata_prefix, oai_crosswalk.name, oai_crosswalk.description, oai_crosswalk.is_system FROM iiirecord.oai_crosswalk", :force => true
  create_view "oai_crosswalk_field", "SELECT oai_crosswalk_field.id, oai_crosswalk_field.oai_crosswalk_id, oai_crosswalk_field.element_name, oai_crosswalk_field.field_group_tag AS varfield_type_code, oai_crosswalk_field.marc_tag, oai_crosswalk_field.subfields, oai_crosswalk_field.is_add_subfield, oai_crosswalk_field.is_varfield, oai_crosswalk_field.fixnum, oai_crosswalk_field.order_num FROM iiirecord.oai_crosswalk_field", :force => true
  create_view "order_note_property", "SELECT order_note_property.id, order_note_property.code, order_note_property.display_order FROM public.order_note_property", :force => true
  create_view "order_note_property_name", "SELECT order_note_property_name.order_note_property_id, order_note_property_name.iii_language_id, order_note_property_name.name FROM public.order_note_property_name", :force => true
  create_view "order_note_property_myuser", "SELECT od.code, od.display_order, odn.name FROM (public.order_note_property od LEFT JOIN public.order_note_property_name odn ON (((od.id = odn.order_note_property_id) AND (odn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "order_record", "SELECT order_record.id, order_record.record_id, order_record.accounting_unit_code_num, order_record.acq_type_code, order_record.catalog_date AS catalog_date_gmt, order_record.claim_action_code, order_record.code1 AS ocode1, order_record.code2 AS ocode2, order_record.code3 AS ocode3, order_record.code4 AS ocode4, order_record.estimated_price, order_record.material_type_code AS form_code, order_record.order_date AS order_date_gmt, order_record.order_note_code, order_record.order_type_code, order_record.receiving_action_code, order_record.received_date AS received_date_gmt, order_record.receiving_location_code, order_record.billing_location_code, order_record.order_status_code, order_record.temporary_location_code, order_record.vendor_record_code, order_record.language_code, order_record.blanket_purchase_order_num, order_record.country_code, order_record.volume_count, order_record.fund_allocation_rule AS fund_allocation_rule_code, order_record.reopen_text, order_record.list_price, order_record.list_price_foreign_amt, order_record.list_price_discount_amt, order_record.list_price_service_charge, order_record.is_suppressed, order_record.fund_copies_paid FROM iiirecord.order_record", :force => true
  create_view "order_record_address_type", "SELECT order_record_address_type.id, order_record_address_type.code FROM iiirecord.order_record_address_type", :force => true
  create_view "order_record_cmf", "SELECT order_record_cmf.id, order_record_cmf.order_record_id, order_record_cmf.display_order, order_record_cmf.fund_code, order_record_cmf.copies, order_record_cmf.location_code FROM iiirecord.order_record_cmf", :force => true
  create_view "order_record_edifact_response", "SELECT order_record_edifact_response.id, order_record_edifact_response.order_record_id, order_record_edifact_response.code, order_record_edifact_response.message, order_record_edifact_response.event_date_gmt FROM iiirecord.order_record_edifact_response", :force => true
  create_view "order_record_paid", "SELECT order_record_paid.id, order_record_paid.order_record_id, order_record_paid.display_order, order_record_paid.paid_date_gmt, order_record_paid.paid_amount, order_record_paid.foreign_paid_amount, order_record_paid.foreign_code, order_record_paid.voucher_num, order_record_paid.invoice_code, order_record_paid.invoice_date_gmt, order_record_paid.from_date_gmt, order_record_paid.to_date_gmt, order_record_paid.copies, order_record_paid.note FROM iiirecord.order_record_paid", :force => true
  create_view "order_record_received", "SELECT order_record_received.id, order_record_received.order_record_id, order_record_received.location_code, order_record_received.fund_code, order_record_received.copy_num, order_record_received.volume_num, order_record_received.item_record_metadata_id, order_record_received.received_date_gmt, order_record_received.display_order FROM iiirecord.order_record_received", :force => true
  create_view "order_status_property", "SELECT order_status_property.id, order_status_property.code, order_status_property.display_order FROM public.order_status_property", :force => true
  create_view "order_status_property_name", "SELECT order_status_property_name.order_status_property_id, order_status_property_name.iii_language_id, order_status_property_name.name FROM public.order_status_property_name", :force => true
  create_view "order_status_property_myuser", "SELECT os.code, os.display_order, osn.name FROM (public.order_status_property os LEFT JOIN public.order_status_property_name osn ON (((os.id = osn.order_status_property_id) AND (osn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "order_type_property", "SELECT order_type_property.id, order_type_property.code, order_type_property.display_order FROM public.order_type_property", :force => true
  create_view "order_type_property_name", "SELECT order_type_property_name.order_type_property_id, order_type_property_name.iii_language_id, order_type_property_name.name FROM public.order_type_property_name", :force => true
  create_view "order_type_property_myuser", "SELECT ot.code, ot.display_order, otn.name FROM (public.order_type_property ot LEFT JOIN public.order_type_property_name otn ON (((ot.id = otn.order_type_property_id) AND (otn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "order_view", "SELECT ord.id, md.record_type AS record_type_code, md.record_num, ord.record_id, ord.accounting_unit_code_num, ord.acq_type_code, ord.catalog_date AS catalog_date_gmt, ord.claim_action_code, ord.code1 AS ocode1, ord.code2 AS ocode2, ord.code3 AS ocode3, ord.code4 AS ocode4, ord.estimated_price, ord.material_type_code, ord.order_date AS order_date_gmt, ord.order_note_code, ord.order_type_code, ord.receiving_action_code, ord.received_date AS received_date_gmt, ord.receiving_location_code, ord.billing_location_code, ord.order_status_code, ord.temporary_location_code, ord.vendor_record_code, ord.language_code, ord.blanket_purchase_order_num, ord.country_code, ord.volume_count, ord.fund_allocation_rule AS fund_allocation_rule_code, ord.reopen_text, ord.list_price, ord.list_price_foreign_amt, ord.list_price_discount_amt, ord.list_price_service_charge, ord.is_suppressed, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.order_record ord ON ((ord.record_id = md.id))) WHERE (md.record_type = 'o'::bpchar)", :force => true
  create_view "patron_record", "SELECT patron_record.id, patron_record.record_id, patron_record.ptype AS ptype_code, patron_record.home_library AS home_library_code, patron_record.expiration_date AS expiration_date_gmt, patron_record.pcode1, patron_record.pcode2, patron_record.pcode3, patron_record.pcode4, patron_record.birth_date AS birth_date_gmt, patron_record.mblock AS mblock_code, patron_record.firm AS firm_code, patron_record.block_until AS block_until_date_gmt, patron_record.patron_agency AS patron_agency_code_num, patron_record.lang_pref AS iii_language_pref_code, patron_record.checkout_total, patron_record.renewal_total, patron_record.checkout_count, patron_record.patron_message_code, patron_record.highest_level_overdue_num, patron_record.claims_returned_total, patron_record.owed_amt, patron_record.itema_count, patron_record.itemb_count, patron_record.overdue_penalty AS overdue_penalty_count, patron_record.ill_checkout_total, patron_record.debit_amt, patron_record.itemc_count, patron_record.itemd_count, patron_record.activity_gmt, patron_record.notification_medium_code, patron_record.registration_count, patron_record.registration_total, patron_record.attendance_total, patron_record.waitlist_count, patron_record.is_reading_history_opt_in FROM iiirecord.patron_record", :force => true
  create_view "patron_record_address", "SELECT patron_record_address.id, patron_record_address.patron_record_id, patron_record_address.patron_record_address_type_id, patron_record_address.display_order, patron_record_address.addr1, patron_record_address.addr2, patron_record_address.addr3, patron_record_address.village, patron_record_address.city, patron_record_address.region, patron_record_address.postal_code, patron_record_address.country FROM iiirecord.patron_record_address", :force => true
  create_view "patron_record_address_type", "SELECT patron_record_address_type.id, patron_record_address_type.code FROM iiirecord.patron_record_address_type", :force => true
  create_view "patron_record_fullname", "SELECT patron_record_fullname.id, patron_record_fullname.patron_record_id, patron_record_fullname.display_order, patron_record_fullname.prefix, patron_record_fullname.first_name, patron_record_fullname.middle_name, patron_record_fullname.last_name, patron_record_fullname.suffix FROM iiirecord.patron_record_fullname", :force => true
  create_view "patron_record_phone", "SELECT patron_record_phone.id, patron_record_phone.patron_record_id, patron_record_phone.patron_record_phone_type_id, patron_record_phone.display_order, patron_record_phone.phone_number FROM iiirecord.patron_record_phone", :force => true
  create_view "patron_record_phone_type", "SELECT patron_record_phone_type.id, patron_record_phone_type.code FROM iiirecord.patron_record_phone_type", :force => true
  create_view "phrase_entry", "SELECT phrase_entry.id, phrase_entry.record_id, phrase_entry.index_tag, phrase_entry.field_group_tag AS varfield_type_code, phrase_entry.occurrence, phrase_entry.is_permuted, phrase_entry.type2, phrase_entry.type3, phrase_entry.index_entry, phrase_entry.insert_title, phrase_entry.phrase_rule_rule_num, phrase_entry.phrase_rule_operation, phrase_entry.phrase_rule_subfield_list, phrase_entry.original_content, phrase_entry.parent_record_id, phrase_entry.insert_title_tag, phrase_entry.insert_title_occurence AS insert_title_occ FROM iiirecord.phrase_entry", :force => true
  create_view "patron_view", "SELECT pr.id, md.record_type AS record_type_code, md.record_num, pe.index_entry AS barcode, pr.ptype AS ptype_code, pr.home_library AS home_library_code, pr.expiration_date AS expiration_date_gmt, pr.pcode1, pr.pcode2, pr.pcode3, pr.pcode4, pr.birth_date AS birth_date_gmt, pr.mblock AS mblock_code, pr.firm AS firm_code, pr.block_until AS block_until_date_gmt, pr.patron_agency AS patron_agency_code_num, pr.lang_pref AS iii_language_pref_code, pr.checkout_total, pr.renewal_total, pr.checkout_count, pr.patron_message_code, pr.highest_level_overdue_num, pr.claims_returned_total, pr.owed_amt, pr.itema_count, pr.itemb_count, pr.overdue_penalty AS overdue_penalty_count, pr.ill_checkout_total, pr.debit_amt, pr.itemc_count, pr.itemd_count, pr.activity_gmt, pr.notification_medium_code, pr.registration_count, pr.registration_total, pr.attendance_total, pr.waitlist_count, pr.is_reading_history_opt_in FROM ((iiirecord.record_metadata md JOIN iiirecord.patron_record pr ON ((pr.id = md.id))) LEFT JOIN iiirecord.phrase_entry pe ON ((((pe.record_id = pr.id) AND ((pe.field_group_tag)::text = 'b'::text)) AND (pe.occurrence = 0)))) WHERE ((md.record_type = 'p'::bpchar) AND (char_length((md.campus_code)::text) = 0))", :force => true
  create_view "patrons_to_exclude", "SELECT patrons_to_exclude.id, patrons_to_exclude.patron_record_metadata_id, patrons_to_exclude.time_added_to_table_gmt FROM report.patrons_to_exclude", :force => true
  create_view "payment", "SELECT payment.id, payment.pmt_date_gmt, payment.amt_paid, payment.pmt_type_code, payment.pmt_note, payment.patron_record_metadata_id FROM iiirecord.payment", :force => true
  create_view "pblock", "SELECT pblock.id, pblock.ptype_code_num, pblock.ptype_agency_code_num, pblock.is_expiration_date_active, pblock.max_owed_amt, pblock.max_overdue_num, pblock.max_item_num, pblock.max_hold_num, pblock.max_ill_item_num, pblock.max_ill_item_per_period_num, pblock.max_itema_num, pblock.max_itemb_num, pblock.max_itemc_num, pblock.max_itemd_num, pblock.max_registration_num, pblock.max_penalty_point_num, pblock.penalty_point_days FROM public.pblock", :force => true
  create_view "phrase_rule", "SELECT phrase_rule.id, phrase_rule.record_type_code, phrase_rule.varfield_type_code, phrase_rule.marctag_pattern AS marc_tag_pattern, phrase_rule.operation, phrase_rule.subfield_list, phrase_rule.phrase_type_code, phrase_rule.rule_num, phrase_rule.is_continue, phrase_rule.display_order FROM public.phrase_rule", :force => true
  create_view "phrase_type", "SELECT phrase_type.id, phrase_type.record_type_code, phrase_type.code AS varfield_type_code, phrase_type.display_order FROM public.phrase_type", :force => true
  create_view "phrase_type_name", "SELECT phrase_type_name.phrase_type_id, phrase_type_name.iii_language_id, phrase_type_name.name, phrase_type_name.plural_name FROM public.phrase_type_name", :force => true
  create_view "physical_format", "SELECT physical_format.id, physical_format.is_default, physical_format.display_order FROM public.physical_format", :force => true
  create_view "physical_format_name", "SELECT physical_format_name.id, physical_format_name.name, physical_format_name.iii_language_id, physical_format_name.physical_format_id FROM public.physical_format_name", :force => true
  create_view "physical_format_myuser", "SELECT pf.id, pf.is_default, pf.display_order, pfn.name FROM (public.physical_format pf LEFT JOIN public.physical_format_name pfn ON (((pf.id = pfn.physical_format_id) AND (pfn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "program_record", "SELECT program_record.id, program_record.record_id, program_record.program_name, program_record.reg_allowed_code, program_record.allocation_rule AS allocation_rule_code, program_record.cost, program_record.eligibility_code, program_record.publication_start_date_gmt, program_record.publication_end_date_gmt, program_record.tickler_days_to_start, program_record.min_alert_days_to_start, program_record.max_alert_seats_open, program_record.reg_per_patron, program_record.program_type_code, program_record.auto_transfer_code, program_record.is_right_result_exact, program_record.gcode1, program_record.gcode2, program_record.gcode3, program_record.is_suppressed FROM iiirecord.program_record", :force => true
  create_view "program_record_location", "SELECT program_record_location.id, program_record_location.program_record_id, program_record_location.location_code, program_record_location.display_order FROM iiirecord.program_record_location", :force => true
  create_view "program_view", "SELECT pr.id, md.record_type AS record_type_code, md.record_num, pr.program_name, pr.reg_allowed_code, pr.allocation_rule AS allocation_rule_code, pr.cost, pr.eligibility_code, pr.publication_start_date_gmt, pr.publication_end_date_gmt, pr.tickler_days_to_start, pr.min_alert_days_to_start, pr.max_alert_seats_open, pr.reg_per_patron, pr.program_type_code, pr.auto_transfer_code, pr.is_right_result_exact, pr.gcode1, pr.gcode2, pr.gcode3, pr.is_suppressed, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.program_record pr ON ((pr.record_id = md.id))) WHERE (md.record_type = 'g'::bpchar)", :force => true
  create_view "ptype_property", "SELECT ptype.id, ptype.value, ptype.tagging_allowed, ptype.display_order, ptype.is_force_right_result_exact_allowed, ptype.is_comment_auto_approved, ptype.ptype_category_id FROM public.ptype", :force => true
  create_view "ptype_property_category", "SELECT ptype_category.id, ptype_category.display_order, ptype_category.is_default FROM public.ptype_category", :force => true
  create_view "ptype_property_category_myuser", "SELECT pc.id, pc.display_order, pc.is_default, pcn.name FROM (public.ptype_category pc LEFT JOIN public.ptype_category_name pcn ON (((pc.id = pcn.ptype_category_id) AND (pcn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "ptype_property_category_name", "SELECT ptype_category_name.ptype_category_id, ptype_category_name.name, ptype_category_name.iii_language_id FROM public.ptype_category_name", :force => true
  create_view "ptype_property_myuser", "SELECT p.value, p.tagging_allowed, p.display_order, p.is_force_right_result_exact_allowed, p.is_comment_auto_approved, p.ptype_category_id, pcn.name FROM ((public.ptype p LEFT JOIN public.ptype_category pc ON ((p.ptype_category_id = pc.id))) LEFT JOIN public.ptype_category_name pcn ON (((pcn.ptype_category_id = pc.id) AND (pcn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "ptype_property_name", "SELECT ptype_desc.ptype_id, ptype_desc.description, ptype_desc.lang_id AS iii_language_id FROM public.ptype_desc", :force => true
  create_view "reading_history", "SELECT reading_history.id, reading_history.bib_record_metadata_id, reading_history.item_record_metadata_id, reading_history.patron_record_metadata_id, reading_history.checkout_gmt FROM iiirecord.reading_history", :force => true
  create_view "receiving_action_property", "SELECT receiving_action_property.id, receiving_action_property.code, receiving_action_property.display_order FROM public.receiving_action_property", :force => true
  create_view "receiving_action_property_name", "SELECT receiving_action_property_name.receiving_action_property_id, receiving_action_property_name.iii_language_id, receiving_action_property_name.name FROM public.receiving_action_property_name", :force => true
  create_view "receiving_action_property_myuser", "SELECT r.code, r.display_order, rn.name FROM (public.receiving_action_property r LEFT JOIN public.receiving_action_property_name rn ON (((r.id = rn.receiving_action_property_id) AND (rn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "receiving_location_property", "SELECT receiving_location_property.id, receiving_location_property.code, receiving_location_property.display_order FROM public.receiving_location_property", :force => true
  create_view "receiving_location_property_name", "SELECT receiving_location_property_name.receiving_location_property_id, receiving_location_property_name.iii_language_id, receiving_location_property_name.name FROM public.receiving_location_property_name", :force => true
  create_view "receiving_location_property_myuser", "SELECT r.code, r.display_order, rn.name FROM (public.receiving_location_property r LEFT JOIN public.receiving_location_property_name rn ON (((r.id = rn.receiving_location_property_id) AND (rn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "record_lock", "SELECT record_lock.id FROM iiirecord.record_lock", :force => true
  create_view "record_range", "SELECT record_range.id, record_range.record_type_code, record_range.accounting_unit_code_num, record_range.start_num, record_range.last_num, record_range.current_count, record_range.deleted_count, record_range.max_num, record_range.size FROM public.record_range", :force => true
  create_view "record_type", "SELECT record_type.id, record_type.code, record_type.tag FROM public.record_type", :force => true
  create_view "record_type_name", "SELECT record_type_name.record_type_id, record_type_name.name, record_type_name.lang_id AS iii_language_id FROM public.record_type_name", :force => true
  create_view "record_type_myuser", "SELECT r.code, r.tag, rn.name FROM (public.record_type r LEFT JOIN public.record_type_name rn ON (((r.id = rn.record_type_id) AND (rn.lang_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "request", "SELECT request.id, request.patron_record_id, request.item_record_id, request.items_display_order, request.ptype, request.patrons_display_order, request.request_gmt, request.pickup_anywhere_location_code, request.central_location_code, request.transaction_num, request.remote_patron_record_key, request.dl_pickup_location_code_num FROM iiirecord.request", :force => true
  create_view "request_rule", "SELECT request_rule.id, request_rule.record_type_code, request_rule.query, request_rule.sql_query FROM public.request_rule", :force => true
  create_view "request_rule_comment", "SELECT request_rule_comment.request_rule_id, request_rule_comment.comment, request_rule_comment.iii_language_id, request_rule_comment.id FROM public.request_rule_comment", :force => true
  create_view "resource_record", "SELECT resource_record.id, resource_record.record_id, resource_record.is_right_result_exact, resource_record.rights_code, resource_record.suppress_code, resource_record.resource_code1 AS ecode1, resource_record.resource_code2 AS ecode2, resource_record.resource_code3 AS ecode3, resource_record.resource_code4 AS ecode4, resource_record.resource_status_code, resource_record.package_code, resource_record.trial_begin_gmt, resource_record.trial_end_gmt, resource_record.renewal_gmt, resource_record.registration_gmt, resource_record.activation_gmt, resource_record.edate5_gmt, resource_record.edate6_gmt, resource_record.language_code, resource_record.country_code, resource_record.access_provider_code, resource_record.location_code, resource_record.publisher_code, resource_record.licensor_code, resource_record.copyright_holder_code, resource_record.data_provider_code, resource_record.consortium_code, resource_record.is_suppressed FROM iiirecord.resource_record", :force => true
  create_view "resource_record_holding_record_related_link", "SELECT resource_record_holding_record_related_link.id, resource_record_holding_record_related_link.resource_record_id, resource_record_holding_record_related_link.holding_record_id, resource_record_holding_record_related_link.resources_display_order FROM iiirecord.resource_record_holding_record_related_link", :force => true
  create_view "resource_record_license_record_link", "SELECT resource_record_license_record_link.id, resource_record_license_record_link.resource_record_id, resource_record_license_record_link.license_record_id, resource_record_license_record_link.licenses_display_order, resource_record_license_record_link.resources_display_order FROM iiirecord.resource_record_license_record_link", :force => true
  create_view "resource_record_order_record_link", "SELECT resource_record_order_record_link.id, resource_record_order_record_link.resource_record_id, resource_record_order_record_link.order_record_id, resource_record_order_record_link.orders_display_order, resource_record_order_record_link.resources_display_order FROM iiirecord.resource_record_order_record_link", :force => true
  create_view "resource_record_order_record_related_link", "SELECT resource_record_order_record_related_link.id, resource_record_order_record_related_link.resource_record_id, resource_record_order_record_related_link.order_record_id, resource_record_order_record_related_link.resources_display_order FROM iiirecord.resource_record_order_record_related_link", :force => true
  create_view "resource_view", "SELECT rr.id, md.record_type AS record_type_code, md.record_num, rr.is_right_result_exact, rr.rights_code, rr.suppress_code, rr.resource_code1 AS ecode1, rr.resource_code2 AS ecode2, rr.resource_code3 AS ecode3, rr.resource_code4 AS ecode4, rr.resource_status_code, rr.package_code, rr.trial_begin_gmt, rr.trial_end_gmt, rr.renewal_gmt, rr.registration_gmt, rr.activation_gmt, rr.edate5_gmt, rr.edate6_gmt, rr.language_code, rr.country_code, rr.access_provider_code, rr.location_code, rr.publisher_code, rr.licensor_code, rr.copyright_holder_code, rr.data_provider_code, rr.consortium_code, rr.is_suppressed, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.resource_record rr ON ((rr.record_id = md.id))) WHERE (md.record_type = 'e'::bpchar)", :force => true
  create_view "returned_billed_item", "SELECT returned_billed_item.id, returned_billed_item.patron_record_metadata_id, returned_billed_item.item_cost_amt, returned_billed_item.checked_in_time_gmt, returned_billed_item.invoice_number FROM report.returned_billed_item", :force => true
  create_view "scat_category", "SELECT scat_category.id, scat_category.code_num, scat_category.scat_section_id FROM iiirecord.scat_category", :force => true
  create_view "scat_category_name", "SELECT scat_category_name.id, scat_category_name.scat_category_id, scat_category_name.name, scat_category_name.iii_language_code FROM iiirecord.scat_category_name", :force => true
  create_view "scat_category_myuser", "SELECT s.code_num AS code, s.scat_section_id, sn.name FROM (iiirecord.scat_category s LEFT JOIN iiirecord.scat_category_name sn ON (((s.id = sn.scat_category_id) AND ((sn.iii_language_code)::text = ((SELECT sn.iii_language_code FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))::text))))", :force => true
  create_view "scat_range", "SELECT scat_range.id, scat_range.line_num, scat_range.start_letter_str, scat_range.end_letter_str, scat_range.start_num_str, scat_range.end_num_str, scat_range.scat_category_id, scat_range.free_text_type FROM iiirecord.scat_range", :force => true
  create_view "scat_section", "SELECT scat_section.id, scat_section.code_num, scat_section.index_tag FROM iiirecord.scat_section", :force => true
  create_view "scat_section_name", "SELECT scat_section_name.id, scat_section_name.scat_section_id, scat_section_name.name, scat_section_name.iii_language_code FROM iiirecord.scat_section_name", :force => true
  create_view "scat_section_myuser", "SELECT s.code_num AS code, s.index_tag, sn.name FROM (iiirecord.scat_section s LEFT JOIN iiirecord.scat_section_name sn ON (((s.id = sn.scat_section_id) AND ((sn.iii_language_code)::text = ((SELECT sn.iii_language_code FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))::text))))", :force => true
  create_view "section_record", "SELECT section_record.id, section_record.record_id, section_record.location_code, section_record.status_code, section_record.program_record_id, section_record.section_display_order, section_record.min_seats, section_record.max_seats, section_record.reg_open_date_gmt, section_record.reg_close_date_gmt, section_record.ecommerce_code, section_record.max_alert_sent_date_gmt, section_record.tickler_sent_date_gmt, section_record.min_alert_sent_date_gmt, section_record.max_waitlist_num, section_record.zcode1, section_record.zcode2, section_record.zcode3, section_record.is_suppressed FROM iiirecord.section_record", :force => true
  create_view "section_record_session", "SELECT section_record_session.section_record_id, section_record_session.start_date, section_record_session.duration_minutes, section_record_session.session_display_order, section_record_session.id, section_record_session.start_date_str FROM iiirecord.section_record_session", :force => true
  create_view "section_registration_seat", "SELECT section_registration_seat.id, section_registration_seat.section_record_id, section_registration_seat.patron_record_id, section_registration_seat.reg_date_gmt, section_registration_seat.is_registered, section_registration_seat.seat_note, section_registration_seat.payment_id, section_registration_seat.reg_date FROM iiirecord.section_registration_seat", :force => true
  create_view "section_view", "SELECT sr.id, md.record_type AS record_type_code, md.record_num, sr.location_code, sr.status_code, sr.program_record_id, sr.section_display_order, sr.min_seats, sr.max_seats, sr.reg_open_date_gmt, sr.reg_close_date_gmt, sr.ecommerce_code, sr.max_alert_sent_date_gmt, sr.tickler_sent_date_gmt, sr.min_alert_sent_date_gmt, sr.max_waitlist_num, sr.zcode1, sr.zcode2, sr.zcode3, sr.is_suppressed FROM (iiirecord.record_metadata md JOIN iiirecord.section_record sr ON ((sr.record_id = md.id))) WHERE (md.record_type = 's'::bpchar)", :force => true
  create_view "session_attendance", "SELECT session_attendance.id, session_attendance.section_record_session_id, session_attendance.section_registration_seat_id, session_attendance.patron_record_id, session_attendance.total_attended FROM iiirecord.session_attendance", :force => true
  create_view "statistic_group", "SELECT statistic_group.id, statistic_group.code_num, statistic_group.location_code FROM public.statistic_group", :force => true
  create_view "statistic_group_name", "SELECT statistic_group_name.statistic_group_id, statistic_group_name.iii_language_id, statistic_group_name.name FROM public.statistic_group_name", :force => true
  create_view "statistic_group_myuser", "SELECT s.code_num AS code, s.location_code, sn.name FROM (public.statistic_group s LEFT JOIN public.statistic_group_name sn ON (((s.id = sn.statistic_group_id) AND (sn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "subfield", "SELECT subfield.record_id, subfield.varfield_id, subfield.field_type_code, subfield.marc_tag, subfield.marc_ind1, subfield.marc_ind2, subfield.occ_num, subfield.display_order, subfield.tag, subfield.content FROM iiirecord.subfield", :force => true
  create_view "varfield", "SELECT varfield.id, varfield.record_id, varfield.field_type_tag AS varfield_type_code, varfield.marc_tag, varfield.marc_ind1, varfield.marc_ind2, varfield.occ_num, varfield.field_content FROM iiirecord.varfield", :force => true
  create_view "subfield_view", "SELECT sf.record_id, md.record_type AS record_type_code, md.record_num, sf.varfield_id, vf.field_type_tag AS field_type_code, vf.marc_tag, vf.marc_ind1, vf.marc_ind2, vf.occ_num, sf.display_order, sf.tag, sf.content FROM (((iiirecord.record_metadata md JOIN iiirecord.record r ON ((r.record_metadata_id = md.id))) JOIN iiirecord.varfield vf ON ((vf.record_id = r.id))) JOIN iiirecord.subfield sf ON ((sf.varfield_id = vf.id))) WHERE ((char_length((md.campus_code)::text) = 0) OR (md.campus_code IS NULL))", :force => true
  create_view "suite_behavior_view", "SELECT suite.code AS suite, application.code AS app, behavior_key.code, COALESCE(behavior_value.string_value, ((behavior_value.integer_value || ''::text))::character varying, (behavior_value.boolean_value)::character varying, ((((behavior_map.map_key)::text || ' -> '::text) || (behavior_map.value)::text))::character varying, behavior_enum.code) AS value, behavior_key.type FROM ((((((public.suite JOIN public.behavior_value ON ((behavior_value.suite_id = suite.id))) JOIN public.behavior_key ON ((behavior_key.id = behavior_value.key_id))) JOIN public.application ON ((application.id = suite.app_id))) LEFT JOIN public.behavior_map ON ((behavior_map.behavior_value_id = behavior_value.id))) LEFT JOIN public.enum_behavior_value_list ON ((enum_behavior_value_list.value_id = behavior_value.id))) LEFT JOIN public.behavior_enum ON ((enum_behavior_value_list.enum_id = behavior_enum.id))) ORDER BY application.code, suite.code, behavior_key.code", :force => true
  create_view "suite_message_view", "SELECT suite.code AS suite, application.code AS app, message_key.code, iii_language.code AS lang, message_value.message AS value FROM ((((public.suite JOIN public.message_value ON ((message_value.suite_id = suite.id))) JOIN public.message_key ON ((message_key.id = message_value.key_id))) JOIN public.application ON ((application.id = suite.app_id))) JOIN public.iii_language ON ((iii_language.id = message_value.lang_id))) ORDER BY application.code, suite.code, message_key.code, iii_language.code", :force => true
  create_view "suite_skin_view", "SELECT suite.code AS suite, application.code AS app, skin_key.code, iii_language.code AS lang, skin_key.type, COALESCE(skin_value.string_value, skin_value.html_value, ((((skin_map.map_key)::text || ' -> '::text) || (skin_map.value)::text))::character varying) AS value FROM (((((public.suite JOIN public.skin_value ON ((skin_value.suite_id = suite.id))) JOIN public.skin_key ON ((skin_key.id = skin_value.key_id))) JOIN public.application ON ((application.id = suite.app_id))) JOIN public.iii_language ON ((iii_language.id = skin_value.lang_id))) LEFT JOIN public.skin_map ON ((skin_map.skin_value_id = skin_value.id))) ORDER BY application.code, suite.code, skin_key.code, iii_language.code", :force => true
  create_view "system_option_group", "SELECT system_option_group.id, system_option_group.code_num FROM iiienv.system_option_group", :force => true
  create_view "system_option_group_name", "SELECT system_option_group_name.system_option_group_id, system_option_group_name.iii_language_id, system_option_group_name.name FROM iiienv.system_option_group_name", :force => true
  create_view "target_audience", "SELECT target_audience.id, target_audience.is_default, target_audience.display_order FROM public.target_audience", :force => true
  create_view "target_audience_name", "SELECT target_audience_name.id, target_audience_name.name, target_audience_name.iii_language_id, target_audience_name.target_audience_id FROM public.target_audience_name", :force => true
  create_view "target_audience_myuser", "SELECT ta.id, ta.is_default, ta.display_order, tan.name FROM (public.target_audience ta LEFT JOIN public.target_audience_name tan ON (((ta.id = tan.target_audience_id) AND (tan.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "temp_location_property", "SELECT temp_location_property.id, temp_location_property.code, temp_location_property.display_order FROM public.temp_location_property", :force => true
  create_view "temp_location_property_name", "SELECT temp_location_property_name.temp_location_property_id, temp_location_property_name.iii_language_id, temp_location_property_name.name FROM public.temp_location_property_name", :force => true
  create_view "temp_location_property_myuser", "SELECT t.code, t.display_order, tn.name FROM (public.temp_location_property t LEFT JOIN public.temp_location_property_name tn ON (((t.id = tn.temp_location_property_id) AND (tn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "title_paging_report", "SELECT title_paging_report.id, title_paging_report.prepared_date_gmt, title_paging_report.location_type, title_paging_report.location_code, title_paging_report.location_group_code_num, title_paging_report.longname FROM notices.title_paging_report", :force => true
  create_view "title_paging_report_entry", "SELECT title_paging_report_entry.id, title_paging_report_entry.title_paging_report_id, title_paging_report_entry.record_metadata_id, title_paging_report_entry.display_order, title_paging_report_entry.title, title_paging_report_entry.call_number, title_paging_report_entry.is_processed FROM notices.title_paging_report_entry", :force => true
  create_view "title_paging_report_entry_item", "SELECT title_paging_report_entry_item.id, title_paging_report_entry_item.title_paging_report_entry_id, title_paging_report_entry_item.record_metadata_id, title_paging_report_entry_item.scanned_date_gmt FROM notices.title_paging_report_entry_item", :force => true
  create_view "title_paging_report_entry_patron", "SELECT title_paging_report_entry_patron.id, title_paging_report_entry_patron.title_paging_report_entry_id, title_paging_report_entry_patron.record_metadata_id FROM notices.title_paging_report_entry_patron", :force => true
  create_view "transit_box_record", "SELECT transit_box_record.id, transit_box_record.record_id, transit_box_record.barcode, transit_box_record.description FROM iiirecord.transit_box_record", :force => true
  create_view "transit_box_record_item_record", "SELECT transit_box_record_item_record.id, transit_box_record_item_record.transit_box_record_id, transit_box_record_item_record.item_record_metadata_id, transit_box_record_item_record.from_location_id, transit_box_record_item_record.to_location_id FROM iiirecord.transit_box_record_item_record", :force => true
  create_view "transit_box_status", "SELECT transit_box_status.id, transit_box_status.location_id, transit_box_status.arrival_timestamp, transit_box_status.transit_box_record_id FROM iiirecord.transit_box_status", :force => true
  create_view "user_defined_category", "SELECT user_defined_category.id, user_defined_category.code FROM public.user_defined_category", :force => true
  create_view "user_defined_property", "SELECT user_defined_property.id, user_defined_property.user_defined_category_id, user_defined_property.code, user_defined_property.display_order FROM public.user_defined_property", :force => true
  create_view "user_defined_property_name", "SELECT user_defined_property_name.user_defined_property_id, user_defined_property_name.iii_language_id, user_defined_property_name.name FROM public.user_defined_property_name", :force => true
  create_view "user_defined_acode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'acode1'::text)", :force => true
  create_view "user_defined_acode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'acode2'::text)", :force => true
  create_view "user_defined_bcode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'bcode1'::text)", :force => true
  create_view "user_defined_bcode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'bcode2'::text)", :force => true
  create_view "user_defined_bcode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'bcode3'::text)", :force => true
  create_view "user_defined_ccode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ccode1'::text)", :force => true
  create_view "user_defined_ccode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ccode2'::text)", :force => true
  create_view "user_defined_ccode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ccode3'::text)", :force => true
  create_view "user_defined_ecode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ecode1'::text)", :force => true
  create_view "user_defined_ecode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ecode2'::text)", :force => true
  create_view "user_defined_ecode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ecode3'::text)", :force => true
  create_view "user_defined_ecode4_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ecode4'::text)", :force => true
  create_view "user_defined_gcode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'gcode1'::text)", :force => true
  create_view "user_defined_gcode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'gcode2'::text)", :force => true
  create_view "user_defined_gcode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'gcode3'::text)", :force => true
  create_view "user_defined_icode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'icode1'::text)", :force => true
  create_view "user_defined_icode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'icode2'::text)", :force => true
  create_view "user_defined_lcode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'lcode1'::text)", :force => true
  create_view "user_defined_lcode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'lcode2'::text)", :force => true
  create_view "user_defined_lcode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'lcode3'::text)", :force => true
  create_view "user_defined_ncode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ncode1'::text)", :force => true
  create_view "user_defined_ncode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ncode2'::text)", :force => true
  create_view "user_defined_ncode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'ncode3'::text)", :force => true
  create_view "user_defined_ocode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'code1'::text)", :force => true
  create_view "user_defined_ocode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'code2'::text)", :force => true
  create_view "user_defined_ocode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'code3'::text)", :force => true
  create_view "user_defined_ocode4_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'code4'::text)", :force => true
  create_view "user_defined_pcode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'pcode1'::text)", :force => true
  create_view "user_defined_pcode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'pcode2'::text)", :force => true
  create_view "user_defined_pcode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'pcode3'::text)", :force => true
  create_view "user_defined_pcode4_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'pcode4'::text)", :force => true
  create_view "user_defined_property_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM (public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"()))))))", :force => true
  create_view "user_defined_scode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'scode1'::text)", :force => true
  create_view "user_defined_scode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'scode2'::text)", :force => true
  create_view "user_defined_scode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'scode3'::text)", :force => true
  create_view "user_defined_scode4_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'scode4'::text)", :force => true
  create_view "user_defined_vcode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'vcode1'::text)", :force => true
  create_view "user_defined_vcode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'vcode2'::text)", :force => true
  create_view "user_defined_vcode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'vcode3'::text)", :force => true
  create_view "user_defined_zcode1_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'zcode1'::text)", :force => true
  create_view "user_defined_zcode2_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'zcode2'::text)", :force => true
  create_view "user_defined_zcode3_myuser", "SELECT ud.code, ud.user_defined_category_id, ud.display_order, udn.name FROM ((public.user_defined_property ud LEFT JOIN public.user_defined_property_name udn ON (((ud.id = udn.user_defined_property_id) AND (udn.iii_language_id = (SELECT u.iii_language_id FROM iiienv.iii_user u WHERE ((u.name)::name = \"current_user\"())))))) JOIN public.user_defined_category udc ON ((ud.user_defined_category_id = udc.id))) WHERE ((udc.code)::text = 'zcode3'::text)", :force => true
  create_view "varfield_type", "SELECT varfield_type.id, varfield_type.record_type_code, varfield_type.code, varfield_type.marctag AS marc_tag, varfield_type.is_enabled, varfield_type.display_order FROM public.varfield_type", :force => true
  create_view "varfield_type_name", "SELECT varfield_type_name.varfield_type_id, varfield_type_name.iii_language_id, varfield_type_name.short_name, varfield_type_name.name FROM public.varfield_type_name", :force => true
  create_view "varfield_view", "SELECT record_metadata.record_type, record_metadata.record_num, record_metadata.campus_code, (((((varfield.field_type_tag)::text || (COALESCE(varfield.marc_tag, ' - '::character varying))::text) || (COALESCE(varfield.marc_ind1, ' '::bpchar))::text) || (COALESCE(varfield.marc_ind2, ' '::bpchar))::text) || (varfield.field_content)::text) AS field FROM (((iiirecord.record_metadata JOIN iiirecord.record ON ((record.record_metadata_id = record_metadata.id))) JOIN iiirecord.field_group ON ((field_group.record_id = record.id))) JOIN iiirecord.varfield ON ((field_group.id = varfield.field_group_id)))", :force => true
  create_view "vendor_record", "SELECT vendor_record.id, vendor_record.record_id, vendor_record.accounting_unit_code_num, vendor_record.code, vendor_record.claim_cycle_code, vendor_record.vendor_code1 AS vcode1, vendor_record.vendor_code2 AS vcode2, vendor_record.vendor_code3 AS vcode3, vendor_record.order_cnt, vendor_record.claim_cnt, vendor_record.cancel_cnt, vendor_record.receipt_cnt, vendor_record.invoice_cnt, vendor_record.orders_claimed_cnt, vendor_record.copies_received_cnt, vendor_record.order_total_amt, vendor_record.invoice_total_amt, vendor_record.estimated_received_price_amt, vendor_record.estimated_cancelled_price_amt, vendor_record.average_weeks, vendor_record.discount, vendor_record.vendor_message_code, vendor_record.language_code, vendor_record.gir_code, vendor_record.is_suppressed FROM iiirecord.vendor_record", :force => true
  create_view "vendor_record_address", "SELECT vendor_record_address.id, vendor_record_address.vendor_record_id, vendor_record_address.vendor_record_address_type_id, vendor_record_address.display_order, vendor_record_address.addr1, vendor_record_address.addr2, vendor_record_address.addr3, vendor_record_address.village, vendor_record_address.city, vendor_record_address.region, vendor_record_address.postal_code, vendor_record_address.country FROM iiirecord.vendor_record_address", :force => true
  create_view "vendor_record_address_type", "SELECT vendor_record_address_type.id, vendor_record_address_type.code FROM iiirecord.vendor_record_address_type", :force => true
  create_view "vendor_view", "SELECT vr.id, md.record_type AS record_type_code, md.record_num, vr.accounting_unit_code_num, vr.code, vr.claim_cycle_code, vr.vendor_code1 AS vcode1, vr.vendor_code2 AS vcode2, vr.vendor_code3 AS vcode3, vr.order_cnt, vr.claim_cnt, vr.cancel_cnt, vr.receipt_cnt, vr.invoice_cnt, vr.orders_claimed_cnt, vr.copies_received_cnt, vr.order_total_amt, vr.invoice_total_amt, vr.estimated_received_price_amt, vr.estimated_cancelled_price_amt, vr.average_weeks, vr.discount, vr.vendor_message_code, vr.language_code, vr.gir_code, vr.is_suppressed, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.vendor_record vr ON ((vr.record_id = md.id))) WHERE (md.record_type = 'v'::bpchar)", :force => true
  create_view "volume_record", "SELECT volume_record.id, volume_record.record_id, volume_record.sort_order, volume_record.is_suppressed FROM iiirecord.volume_record", :force => true
  create_view "volume_record_item_record_link", "SELECT volume_record_item_record_link.id, volume_record_item_record_link.volume_record_id, volume_record_item_record_link.item_record_id, volume_record_item_record_link.items_display_order FROM iiirecord.volume_record_item_record_link", :force => true
  create_view "volume_view", "SELECT vr.id, md.record_type AS record_type_code, md.record_num, vr.sort_order, vr.is_suppressed, md.record_creation_date_gmt FROM (iiirecord.record_metadata md JOIN iiirecord.volume_record vr ON ((vr.record_id = md.id))) WHERE (md.record_type = 'j'::bpchar)", :force => true
  create_view "wamreport", "SELECT wamreport.id, wamreport.logged_gmt, wamreport.requesting_ip, wamreport.requesting_port, wamreport.requesting_iii_name, wamreport.dest_port, wamreport.dest_code, wamreport.response_category_code_num, wamreport.patron_record_metadata_id, wamreport.ptype_code_num, wamreport.pcode1, wamreport.pcode2, wamreport.pcode3_code_num, wamreport.pcode4_code_num, wamreport.rejection_reason_code_num FROM report.wamreport", :force => true
  create_view "workflow", "SELECT workflow.id, workflow.display_order, workflow.name FROM iiienv.workflow", :force => true
  create_view "workflow_function", "SELECT workflow_function.id, workflow_function.workflow_id, workflow_function.function_id, workflow_function.display_order FROM iiienv.workflow_function", :force => true
  create_view "workflow_name", "SELECT workflow_name.workflow_id, workflow_name.iii_language_id, workflow_name.menu_name FROM iiienv.workflow_name", :force => true
  create_view "zip_code_info", "SELECT zip_code_info.id, zip_code_info.zip_code, zip_code_info.latitude, zip_code_info.longitude, zip_code_info.country_code FROM public.zip_code_info", :force => true
end
